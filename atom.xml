<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RongXiang</title>
  
  <subtitle>我的烂笔头</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zjrongxiang.github.io/"/>
  <updated>2022-01-19T12:42:42.453Z</updated>
  <id>https://zjrongxiang.github.io/</id>
  
  <author>
    <name>rong xiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大数据工程师技术自测题库</title>
    <link href="https://zjrongxiang.github.io/2022/01/19/2022-01-19-%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8A%80%E6%9C%AF%E8%87%AA%E6%B5%8B%E9%A2%98%E5%BA%93/"/>
    <id>https://zjrongxiang.github.io/2022/01/19/2022-01-19-大数据工程师技术自测题库/</id>
    <published>2022-01-19T05:30:00.000Z</published>
    <updated>2022-01-19T12:42:42.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>背景</li><li>第一部分 Spark内存管理详解</li><li>第二部分 Spark参数说明</li><li>第三部分 Spark内存优化</li><li>第四部分 常见线上问题解决</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><p><a href="https://book.itheima.net/study/1269935677353533441/1270254018572066817" target="_blank" rel="noopener">https://book.itheima.net/study/1269935677353533441/1270254018572066817</a></p><h2 id="参考文献及资料"><a href="#参考文献及资料" class="headerlink" title="参考文献及资料"></a>参考文献及资料</h2><p>1、<code>RuoYi-Cloud</code>项目文档，链接：<a href="https://blog.csdn.net/ifenggege/article/details/107968518" target="_blank" rel="noopener">https://blog.csdn.net/ifenggege/article/details/107968518</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分 Spark内存管理详解&lt;/li&gt;
&lt;li&gt;第二部分 Spark参数说明&lt;/li&gt;
&lt;li&gt;第三
      
    
    </summary>
    
      <category term="Spring" scheme="https://zjrongxiang.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Hadoop HDFS高可用机制</title>
    <link href="https://zjrongxiang.github.io/2022/01/16/2022-01-18-Hadoop%20HDFS%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9C%BA%E5%88%B6/"/>
    <id>https://zjrongxiang.github.io/2022/01/16/2022-01-18-Hadoop HDFS高可用机制/</id>
    <published>2022-01-16T05:30:00.000Z</published>
    <updated>2022-01-19T10:17:38.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>背景</li><li>第一部分 Spark内存管理详解</li><li>第二部分 Spark参数说明</li><li>第三部分 Spark内存优化</li><li>第四部分 常见线上问题解决</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>先从一个生产线上问题说起。生产线上我们使用的华为封装的Hadoop大数据平台，使用开源版本Flink 1.11作为Flink客户端提交任务到平台Yarn集群上运行。</p><p>但是提交后报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cused by： java.lang.NoSuchMethodException: org.aphache.hadoop.hdfs.server.namedode.ha.AdaptiveFailoverProxyProvider.&lt;int&gt;....</span><br></pre></td></tr></table></figure><p>即在提交过程中Flink客户端找不到下面这个java class类导致的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.aphache.hadoop.hdfs.server.namedode.ha.AdaptiveFailoverProxyProvider</span><br></pre></td></tr></table></figure><p>通过官网（<a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HDFSHighAvailabilityWithQJM.html" target="_blank" rel="noopener">如下</a>），这个类是用来寻找active状态的HDFS NameNode服务的。通常对于开源集群默认类是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider</span><br></pre></td></tr></table></figure><p>然而华为集群自定义了这个类（参考客户端中配置文件），所以开源Flink包中并没有这个类，所以会报错找不到类。</p><p>重新调整客户端中的配置为开源默认参数（或者集群控制台中修改生效后，重新下载和部署客户端），既能提交任务。</p><ul><li><p><strong>dfs.client.failover.proxy.provider.[nameservice ID]</strong> - the Java class that HDFS clients use to contact the Active NameNode</p><p>Configure the name of the Java class which will be used by the DFS Client to determine which NameNode is the current Active, and therefore which NameNode is currently serving client requests. The two implementations which currently ship with Hadoop are the <strong>ConfiguredFailoverProxyProvider</strong> and the <strong>RequestHedgingProxyProvider</strong> (which, for the first call, concurrently invokes all namenodes to determine the active one, and on subsequent requests, invokes the active namenode until a fail-over happens), so use one of these unless you are using a custom proxy provider. For example:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.mycluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>本文将介绍背后的原因。</p><h2 id="第一部分-HDFS服务高可用原理"><a href="#第一部分-HDFS服务高可用原理" class="headerlink" title="第一部分 HDFS服务高可用原理"></a>第一部分 HDFS服务高可用原理</h2><h3 id="1-1-HDFS服务"><a href="#1-1-HDFS服务" class="headerlink" title="1.1 HDFS服务"></a>1.1 HDFS服务</h3><p>Hadoop 2.0.0 之前，集群只有一个Namenode服务，这显然是个单点问题。对于线上生产环境部署NameNode服务的服务器机器发生宕机，会导致整个HDFS服务不可用。即使应急快，NameNode节点从磁盘中将元数据加载至内存也是一个极端缓慢的过程（大数据场景）。显然这对于业务连续性要求是不能容忍的。另外日常运维中，对于NameNode的变更需要计划内停机，在变更过程中，集群同样是不能对外提供服务的。</p><p>所以在Hadoop 2.0 +之后的版本引入了HA高可用机制。具体架构图如下。</p><p>注：我们在架构图（参考网络）中看到<code>FailoverController</code>了。</p><p><img src="D:\myblog\source\_posts\images\picture\hdfsHA\hdfsHA1.png" alt="hdfsHA1"></p><p>在现有框架下，HDFS一共有下面几类服务：</p><ul><li><p>DataNode（DN）；数据节点；</p><p>除了通过共享存储系统共享 HDFS 的元数据信息之外，主 NameNode 和备 NameNode 还需要共享 HDFS 的数据块和 DataNode 之间的映射关系。DataNode 会同时向主 NameNode 和备 NameNode 上报数据块的位置信息。</p></li><li><p>NameNode（NN）；管理节点；</p><p>Active NameNode 和 Standby NameNode：两台 NameNode 形成互备，一台处于 Active 状态，为主 NameNode，另外一台处于 Standby 状态，为备 NameNode，只有主 NameNode 才能对外提供读写服务。</p></li><li><p>ZKFailoverController（FailoverControllerActive\Standby）；服务角色：主备切换控制器；</p></li><li><p>JournNode（JN）；共享存储；</p><p>共享存储系统是实现 NameNode 的高可用最为关键的部分，共享存储系统保存了 NameNode 在运行过程中所产生的 HDFS 的元数据。主 NameNode 和NameNode 通过共享存储系统实现元数据同步。在进行主备切换的时候，新的主 NameNode 在确认元数据完全同步之后才能继续对外提供服务，主要有JournalNode 。</p></li><li><p>Zookeeper集群（ZK）；提供主备选举支持（通常和其他HA服务共用）；</p><p>ZKFailoverController 作为独立的进程运行，对 NameNode 的主备切换进行总体控制。ZKFailoverController 能及时检测到 NameNode 的健康状况，在主 NameNode 故障时借助 Zookeeper 实现自动的主备选举和切换，当然 NameNode 目前也支持不依赖于 Zookeeper 的手动主备切换。</p></li></ul><h3 id="1-2-HA机制原理"><a href="#1-2-HA机制原理" class="headerlink" title="1.2 HA机制原理"></a>1.2 HA机制原理</h3><h3 id="1-2-1-机制"><a href="#1-2-1-机制" class="headerlink" title="1.2.1 机制"></a>1.2.1 机制</h3><p>当Active NN故障时，Zookeeper创建的临时节点ActiveStandbyElectorLock将要被删除，其他NN节点注册的Watcher 来监听到该变化，NN节点的ZKFailoverController 会马上再次进入到创建/hadoop-ha/${dfs.nameservices}/ActiveStandbyElectorLock 节点的流程，如果创建成功，这个本来处于 Standby 状态的 NameNode 就选举为主 NameNode 并随后开始切换为 Active 状态。</p><p>新当选的Active NN将确保从QJM(Quorum Journal Manager)同步完所有的元数据文件EditLog文件，然后切换为主节点，并向外提供服务。</p><h3 id="1-2-2-手动切换"><a href="#1-2-2-手动切换" class="headerlink" title="1.2.2 手动切换"></a>1.2.2 手动切换</h3><p>Hadoop客户端提供haadmin命令对NN节点可以实时手动切换，具体命令清单有：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hdfs haadmin -checkHealth &lt;serviceId&gt;</span><br><span class="line">hdfs haadmin -failover [--forcefence] [--forceactive] &lt;serviceId&gt; &lt;serviceId&gt;</span><br><span class="line">hdfs haadmin -getServiceState &lt;serviceId&gt;</span><br><span class="line">hdfs haadmin -help &lt;command&gt;</span><br><span class="line">hdfs haadmin -transitionToActive &lt;serviceId&gt; [--forceactive]</span><br><span class="line">hdfs haadmin -transitionToStandby &lt;serviceId&gt;</span><br></pre></td></tr></table></figure><p>其中<code>serviceId</code>可以通过配置文件<code>hdfs.xml</code>中找到<code>service id</code>，配置文件内容如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>cluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.cluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>14,15<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以集群的NN节点有两个，名称为：14、15（比较特别，这是华为大数据产品）。</p><p>那么就可以通过下面的命令来查看NN的状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hdfs haadmin -getServiceState 14</span><br><span class="line"><span class="meta">#</span><span class="bash"> active</span></span><br><span class="line">hdfs haadmin -getServiceState 15</span><br><span class="line"><span class="meta">#</span><span class="bash"> standy</span></span><br></pre></td></tr></table></figure><p>通过下面命令把active服务调整为standy：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hdfs haadmin -transitionToStandby 14 --forcemanual</span><br><span class="line"><span class="meta">#</span><span class="bash"> 会回显风险提示确认是否继续</span></span><br></pre></td></tr></table></figure><h2 id="第二部分-客户端交互"><a href="#第二部分-客户端交互" class="headerlink" title="第二部分 客户端交互"></a>第二部分 客户端交互</h2><p>便于客户端确定哪个nn是主节点。对于第一次调用，它同时调用所有名称节点以确定活动的名称节点,之后便直接调用主节点（active nn）,可以理解帮助客户端获取主节点的代理。 ConfiguredFailoverProxyProvider 和RequestHedgingProxyProvider 选其一即可。</p><h4 id="HDFS-jar包冲突列表"><a href="#HDFS-jar包冲突列表" class="headerlink" title="HDFS jar包冲突列表"></a>HDFS jar包冲突列表</h4><table><thead><tr><th>Jar包名称</th><th>描述</th><th>处理方案</th></tr></thead><tbody><tr><td>hadoop-plugins-*.jar</td><td>HDFS可以直接使用开源同版本的hadoop包运行样例代码，但是MRS 3.x之后的版本默认的主备倒换类是dfs.client.failover.proxy.provider.hacluster=org.apache.hadoop.hdfs.server.namenode.ha.AdaptiveFailoverProxyProvider默认HDFS的LZC压缩格式类io.compression.codec.lzc.class=com.huawei.hadoop.datasight.io.compress.lzc.ZCodec</td><td>方式一：参考样例代码里面的pom.xml文件，增加配置：<code>&lt;properties&gt;    &lt;hadoop.ext.version&gt;8.0.2-302002&lt;/hadoop.ext.version&gt; &lt;/properties&gt; ... &lt;dependency&gt;    &lt;groupId&gt;com.huawei.mrs&lt;/groupId&gt;    &lt;artifactId&gt;hadoop-plugins&lt;/artifactId&gt;    &lt;version&gt;${hadoop.ext.version}&lt;/version&gt; &lt;/dependency&gt;</code>方式二：将hdfs-site.xml配置文件里面的参数dfs.client.failover.proxy.provider.hacluster改为开源一致的值：org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider不使用LZC压缩格式。</td></tr></tbody></table><h2 id="参考文献及资料"><a href="#参考文献及资料" class="headerlink" title="参考文献及资料"></a>参考文献及资料</h2><p>1、<code>RuoYi-Cloud</code>项目文档，链接：<a href="https://blog.csdn.net/ifenggege/article/details/107968518" target="_blank" rel="noopener">https://blog.csdn.net/ifenggege/article/details/107968518</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分 Spark内存管理详解&lt;/li&gt;
&lt;li&gt;第二部分 Spark参数说明&lt;/li&gt;
&lt;li&gt;第三
      
    
    </summary>
    
      <category term="Spring" scheme="https://zjrongxiang.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spark内存管理和优化</title>
    <link href="https://zjrongxiang.github.io/2021/11/16/2021-12-24-Spark%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E4%BC%98%E5%8C%96/"/>
    <id>https://zjrongxiang.github.io/2021/11/16/2021-12-24-Spark内存管理和优化/</id>
    <published>2021-11-16T05:30:00.000Z</published>
    <updated>2022-01-19T11:07:44.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>背景</li><li>第一部分 Spark内存管理详解</li><li>第二部分 Spark参数说明</li><li>第三部分 Spark内存优化</li><li>第四部分 常见线上问题解决</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><code>Spark</code>任务目前仍然是大数据生产环境上，最主要的分布式计算引擎（虽然大部分企业都在将技术栈迁移至<code>Flink</code>）。<code>Spark</code>计算框架出现在<code>MapReduce</code>之后，主要优点在于内存计算（本质都是实现<a href="https://uxtuo.github.io/2018/01/03/Google%E4%B8%89%E5%A4%A7%E8%AE%BA%E6%96%87/" target="_blank" rel="noopener">Google关于大数据的三篇论文</a>），但是在开发和维护<code>Spark</code>任务的时候经常出现内存资源问题。所以本文将详细介绍<code>Spark</code>的内存管理原理和各个版本的演进。</p><p>本文讲解主要基于<code>Spark 2.3.0</code>版本。需要读者具备<code>Java JVM</code>基础、<code>Spark RDD</code>、<code>Shuffle</code>等Spark基础知识。前面主要将理论和原理，后面介绍案例。</p><p>本文图片使用<code>visio</code>画图，需要原文件的同学可以私信我提供。</p><h2 id="第一部分-Spark-内存管理详解"><a href="#第一部分-Spark-内存管理详解" class="headerlink" title="第一部分 Spark 内存管理详解"></a>第一部分 Spark 内存管理详解</h2><h3 id="1-1-Spark任务运行基础"><a href="#1-1-Spark任务运行基础" class="headerlink" title="1.1 Spark任务运行基础"></a>1.1 Spark任务运行基础</h3><p><code>Spark</code>在运行时，会启动<code>Executor</code>和<code>Driver</code>两种<code>JVM</code>进程。其中<code>Driver</code>为管理容器，负责创建<code>Spark Context</code>、提交<code>Spark</code>作业（<code>job</code>），最后将作业转换成计算任务（<code>Task</code>），并协调、调度、下发给任务集群的<code>Executor</code>容器。<code>Executor</code>容器负责具体的计算任务，执行完成后将结果返回给<code>Driver</code>，并提供对<code>RDD</code>的存储服务。参考下图（对于<code>Spark on Yarn</code>运行模式时，<code>Cluster Manager</code>对应为<code>ResourceManager</code>，<code>Worker Node</code> 对应<code>NodeManager</code>）。</p><p><img src="C:\Users\rongxiang\Desktop\spark_Merory_Manager\cluster-overview.png" alt="cluster-overview"></p><p><code>Spark2.3.0</code>版本前，<code>Driver</code>进程的内存管理即为典型<code>JVM</code>内存管理。主要区别是对于<code>Executor</code>，<code>Spark</code>内存管理引入了堆外内存的概念。</p><p><code>Spark 2.3.0</code>版本开始，<code>Driver</code>进程也引入了堆外内存的概念，如下图。</p><p><img src="C:\Users\rongxiang\Desktop\spark_Merory_Manager\fenji.png" alt="fenji"></p><p>我们以<code>Spark on Yarn</code>运行模式来描述<code>Execution</code>的内存管理。当我们将任务提交给Yarn集群，Yarn集群首先分配和<code>AM</code>（<code>Application Master</code>）容器（即<code>Driver</code>）资源，然后向<code>RM</code>（<code>Resource Manager</code>）申请<code>Executior</code>容器资源。<code>RM</code>处理内存资源请求并分配<code>Executior</code>容器。</p><h3 id="1-2-Spark内存管理演进"><a href="#1-2-Spark内存管理演进" class="headerlink" title="1.2 Spark内存管理演进"></a>1.2 Spark内存管理演进</h3><p><code>Spark</code>目前版本演进中支持两种内存管理模式：静态内存管理器（<code>Static Memory Manager</code>）和统一内存管理器（<code>Unified Memory Manager</code>），主要版本演进如下：</p><ul><li><p><code>Spark 1.0+</code>版本，静态内存管理器;</p></li><li><p><code>Spark 1.6</code> 版本，<code>Executor</code>容器引入堆外（<code>off-Head</code>）内存机制；</p></li><li><p><code>Spark 1.6+</code> 版本，引入统一内存管理器；</p></li><li><p><code>Spark 2.3+</code>版本，<code>Driver</code>容器也引入堆外内存机制（<code>Spark on Yarn</code> 和<code>Spark on K8s</code>）；</p><p>注：在官网<a href="https://spark.apache.org/releases/spark-release-2-3-0.html" target="_blank" rel="noopener">Spark2.3.0版本特性</a>说明上没找到，但查证为该版本新增特性（目前大量相关Spark的中文介绍材料还没有更新，即Driver没有堆外内存。建议大家可以留意一下官网）；</p></li><li><p><code>Spark 3.0+</code> 版本，去除对静态内存管理器的支持；</p></li></ul><p>从<code>Spark</code> 源码中看：<a href="https://github.com/apache/spark/tree/master/core/src/main/scala/org/apache/spark/memory" target="_blank" rel="noopener">org/apache/spark/memory</a>，通过<code>MemoryManager</code>接口实现管理<code>Storage</code> 内存和 Execution 内存、同一个Executor中的任务调用接口申请或释放内存。而<code>MemoryManager</code>有两个实现 <code>StaticMemoryManager</code>和<code>UnifiedMemoryManager</code>，即分别是静态内存管理器（<code>Static Memory Manager</code>）和统一内存管理器（<code>Unified Memory Manager</code>）。</p><p><code>Spark 1.6+</code> 版本中，可以通过参数<code>spark.memory.useLegacyMode</code>配置使用哪种模式，默认开启<code>Unified Memory Manager</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下面的配置开启静态内存管理器（Static Memory Manager），默认值为<span class="literal">false</span></span></span><br><span class="line">spark.memory.useLegacyMode = true</span><br></pre></td></tr></table></figure><p>后文，将详细介绍两种资源分配的方式。</p><h4 id="1-2-1-静态管理模式"><a href="#1-2-1-静态管理模式" class="headerlink" title="1.2.1 静态管理模式"></a>1.2.1 静态管理模式</h4><p>所谓静态管理（<code>Static Memory Manager</code>）模式，即存储内存（<code>Storage Memory</code>）、执行内存（<code>Execution Memory</code>）以及其他内存（<code>Other Memory</code>）资源的大小，在<code>Spark</code>应用程序运行期间是固定值。用户需要在任务运行前进行配置，任务一旦运行中将无法动态调整。</p><h5 id="1-2-1-1-堆内内存"><a href="#1-2-1-1-堆内内存" class="headerlink" title="1.2.1.1 堆内内存"></a>1.2.1.1 堆内内存</h5><p>下图是静态内存管理模式下的内存资源划分：</p><p><img src="C:\Users\rongxiang\Desktop\spark_Merory_Manager\静态（堆内）.bmp" alt="静态（堆内）"></p><ul><li><p>预留内存（<code>Reserved Memory</code>）：</p><p>其中<code>Storage</code>内存和<code>Execution</code>内存均有预留区域，用于防止<code>OOM</code>的风险。</p></li><li><p><code>Storage</code>内存（存储内存）：</p><p>计算公式（其中 <code>systemMaxMemory</code>取决于当前 <code>JVM</code> 堆内内存的大小）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可用的Storage内存 = systemMaxMemory*spark.storage.memoryFraction*spark.storage.safetyFraction</span><br><span class="line"><span class="meta">#</span><span class="bash"> spark.shuffle.memoryFraction 默认为0.6</span></span><br></pre></td></tr></table></figure><p>用于存储 <code>RDD</code>的缓存（<code>cache</code>）数据 和 广播（<code>Broadcast</code>）。这部分存储对象更多是为将来计算重用的数据。</p></li><li><p><code>Execution</code>内存（执行内存）：</p><p>计算公式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可用的Execution内存 = systemMaxMemory*spark.shuffle.memoryFraction*spark.shuffle.safetyFraction</span><br><span class="line"><span class="meta">#</span><span class="bash"> spark.shuffle.memoryFraction 默认为0.2</span></span><br></pre></td></tr></table></figure><p>用于执行<code>Shuffle</code>时占用的内存，主要用于存放 <code>Shuffles</code>、<code>Joins</code>、<code>Sort</code>、<code>aggregations</code>等计算过程中的临时数据。待完成操作后，就会释放资源，寿命较短。</p></li><li><p>其他内存（<code>Otrher Memory</code>）：</p><p>Spark内部元数据和用户自定义数据类型。</p></li></ul><h5 id="1-2-1-2-堆外内存"><a href="#1-2-1-2-堆外内存" class="headerlink" title="1.2.1.2 堆外内存"></a>1.2.1.2 堆外内存</h5><p><code>Spark</code>任务本质还是运行在<code>JVM</code>虚机上的<code>Java</code>进程，所以<code>Executor</code>的内存管理仍然是基于<code>JVM</code>的内存管理。而堆内存受到 <code>JVM</code>统一管理，<code>GC</code>基于一定算法逻辑，当spark任务需要申请和释放内存的时候，并不自由灵活。具体流程如下：</p><ul><li>申请内存：<ul><li>Spark在代码中new一个对象实例</li><li>JVM从堆内内存分配空间，创建对象并返回对象引用</li><li>Spark保存该对象的引用，记录该对象占用的内存</li></ul></li><li>释放内存：<ul><li>Spark记录该对象释放的内存，删除该对象的引用</li><li>等待JVM的垃圾回收机制释放该对象占用的堆内内存</li></ul></li></ul><p>即<code>Spark</code>不能准确记录实际可用的堆内内存，从而也无法避免内存溢出<code>OOM</code>。所以Spark 从1.6 版本开始引入了<code>Off-heap memory</code>(<a href="https://issues.apache.org/jira/browse/SPARK-11389" target="_blank" rel="noopener">SPARK-11389</a>)。该内存资源不属于<code>JVM</code>内存，而是调用 <code>Java</code> 的 <code>unsafe</code> 相关 <code>API</code> 直接向操作系统申请内存，直接在服务器节点的内存中开辟空间，存储经过序列化的二进制数据。由于这种方式不需要 <code>JVM</code> 内存管理，所以可以避免频繁的 <code>GC</code>，但是缺点是用户必须自行编写内存申请和释放的逻辑。</p><p>默认情况下，堆外内存是禁用的。可以通过参数<code>spark.memory.offHeap.enabled</code> 参数启用它 ，并通过<code>spark.memory.offHeap.size</code> 参数设置内存大小，单位为字节 。</p><p>与堆内内存相比，堆外内存模型比较简单，只有<code>Storage memory</code>和<code>Execution memory</code>，其分布如下图所示：</p><p><img src="C:\Users\rongxiang\Desktop\spark_Merory_Manager\静态（堆外）.bmp" alt="静态（堆外）"></p><h5 id="1-2-1-2-总结"><a href="#1-2-1-2-总结" class="headerlink" title="1.2.1.2 总结"></a>1.2.1.2 总结</h5><p><code>Static Memory Manager</code>机制实现起来比较简单，但是使用中需要用户熟悉Spark的存储机制，并具有丰富的资源预设评估能力。否则很容易导致<code>Storage memory</code>和<code>Execution memory</code>空间资源使用冰火两重天，饿的饿死，饱的饱死。</p><p>于是Spark社区考虑引入新的内存管理模式，参考提案文件：<a href="https://www.linuxprobe.com/wp-content/uploads/2017/04/unified-memory-management-spark-10000.pdf" target="_blank" rel="noopener">Unified Memory Manager</a>提案。</p><h4 id="1-2-2-统一管理模式"><a href="#1-2-2-统一管理模式" class="headerlink" title="1.2.2 统一管理模式"></a>1.2.2 统一管理模式</h4><p>在统一管理模式（Unified Memory Manager ）机制下，<code>Storage memory</code> 和<code>Execution memory</code> 共享一个内存区域，两者可以相互占用空闲区域，不再有严格的资源限制边界。</p><h5 id="1-2-2-1-堆内-On-Heap-内存"><a href="#1-2-2-1-堆内-On-Heap-内存" class="headerlink" title="1.2.2.1 堆内(On-Heap)内存"></a>1.2.2.1 堆内(On-Heap)内存</h5><p><img src="C:\Users\rongxiang\Desktop\spark_Merory_Manager\统一（堆内）.bmp" alt="统一（堆内）"></p><p>注：上图显示<code>spark.memory.fraction=0.75</code> 。根据<a href="https://issues.apache.org/jira/browse/SPARK-15796" target="_blank" rel="noopener">SPARK-15796</a>，从 <code>Spark 2.0</code> 版本开始减少到 <code>0.6</code>。</p><p>主要变化是预留内存：</p><ul><li><p>Reserved预留内存</p><p>这部分内存主要用户Spark内部对象存储。大小不可配置，写死在代码中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码文件：org.apache.spark.memory.UnifiedMemoryManager</span></span><br><span class="line"><span class="keyword">private</span> val RESERVED_SYSTEM_MEMORY_BYTES = <span class="number">300</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br></pre></td></tr></table></figure><p>注：对于测试环境，可以通过参数调小该资源。参数值为：<code>spark.testing.reservedMemory</code>。</p></li></ul><p>堆内内存的大小为spark任务提交是参数<code>executor-memory</code>或配置参数<code>spark.executor.memory</code>决定。</p><h5 id="1-2-2-2-堆外-Off-Heap-内存"><a href="#1-2-2-2-堆外-Off-Heap-内存" class="headerlink" title="1.2.2.2 堆外(Off-Heap)内存"></a>1.2.2.2 堆外(Off-Heap)内存</h5><h6 id="1-2-2-2-1-Exector堆外内存"><a href="#1-2-2-2-1-Exector堆外内存" class="headerlink" title="1.2.2.2.1 Exector堆外内存"></a>1.2.2.2.1 Exector堆外内存</h6><p><img src="C:\Users\rongxiang\Desktop\spark_Merory_Manager\统一（堆外）.bmp" alt="统一（堆外）"></p><p>对于<code>Spark on Yarn</code>（<code>Spark 2.3.0</code>）模式，通过下面的参数修改任务的对外内存大小：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spark.memory.enable.offheap.enable = true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认开启</span></span><br><span class="line"></span><br><span class="line">spark.yarn.executor.memoryOverhead=1024</span><br><span class="line"><span class="meta">#</span><span class="bash"> 单位M</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认值为executorMemory * 0.10, with minimum of 384m</span></span><br></pre></td></tr></table></figure><p>例如下面的启动日志，默认申请了<code>384MB</code>的对外内存：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YarnAllocator:<span class="number">54</span> - Will request <span class="number">2</span> executor container(s), each with <span class="number">1</span> core(s) <span class="keyword">and</span> <span class="number">1408</span> MB memory (including <span class="number">384</span> MB of overhead)</span><br></pre></td></tr></table></figure><h6 id="1-2-2-2-2-Driver堆外内存"><a href="#1-2-2-2-2-Driver堆外内存" class="headerlink" title="1.2.2.2.2 Driver堆外内存"></a>1.2.2.2.2 Driver堆外内存</h6><p><code>Spark 2.3.0</code>版本对于<code>Driver</code>也引入了堆外内存的机制。堆外内存的大小为：<code>max(driverMemory * 0.10,384MB)</code>。主要注意的是只支持对于<code>Spark</code>任务基于<code>Yarn</code>和<code>K8s</code>集群调度运行的场景。</p><p>官网参数说明如下：</p><table><thead><tr><th><code>spark.driver.memoryOverhead</code></th><th>driverMemory * 0.10, with minimum of 384</th><th>The amount of off-heap memory to be allocated per driver in cluster mode, in MiB unless otherwise specified. This is memory that accounts for things like VM overheads, interned strings, other native overheads, etc. This tends to grow with the container size (typically 6-10%). This option is currently supported on YARN and Kubernetes.</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>可以在任务提交日志中看下面下面的日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> driverMemory = 1G, max(driverMemory * 0.10,384MB) = 384MB</span></span><br><span class="line">Client:54 - Will allocate AM container, with 1408 MB memory including 384 MB overhead</span><br><span class="line"><span class="meta">#</span><span class="bash"> driverMemory = 4G, max(driverMemory * 0.10,384MB) = 409MB</span></span><br><span class="line">Client:54 - Will allocate AM container, with 4505 MB memory including 409 MB overhead</span><br></pre></td></tr></table></figure><h5 id="1-2-2-3-计算案例"><a href="#1-2-2-3-计算案例" class="headerlink" title="1.2.2.3 计算案例"></a>1.2.2.3 计算案例</h5><p>我们在测试集群上运行一个<code>Spark</code>任务，并计算和验证上面的理论，<code>Yarn</code>集群资源限制：</p><p>参数<code>yarn.scheduler.maximum-allocation-mb</code>限制单个容器最大分配内存大小，高于该值请求无法生效。</p><p>同样对于单个<code>Node Manager</code>也有资源限制，由参数<code>yarn.nodemanager.resource.memory-mb</code>控制。即单个<code>Node Manager</code>可提供给<code>Yarn</code>集群的物理内存资源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> nodemanager能够申请的最大内存，默认值为30G</span></span><br><span class="line">yarn.nodemanager.resource.memory-mb: 30G</span><br><span class="line"><span class="meta">#</span><span class="bash"> 调度时一个container能够申请的最大资源，默认值为4G</span></span><br><span class="line">yarn.scheduler.maximum-allocation-mb: 4G</span><br></pre></td></tr></table></figure><p>对于统一内存管理模式，运行脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@quickstart spark-2.3.0]# cat run_example.sh </span><br><span class="line">export YARN_CONF_DIR=/etc/hadoop/conf</span><br><span class="line">/home/spark-2.3.0/bin/spark-submit \</span><br><span class="line">--conf "spark.executorEnv.JAVA_HOME=/home/openjdk" \</span><br><span class="line">--conf "spark.yarn.appMasterEnv.JAVA_HOME=/home/openjdk" \</span><br><span class="line">--master yarn \</span><br><span class="line">--deploy-mode cluster \</span><br><span class="line">--num-executors 2 \</span><br><span class="line">--driver-memory 1G \</span><br><span class="line">--executor-memory 1G \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">/home/spark-2.3.0/examples/jars/spark-examples_2.11-2.3.0.jar</span><br></pre></td></tr></table></figure><p>任务运行后我们查看<code>Spark UI</code>，发现<code>Storage Memory</code>的大小为<code>384.1MB</code>。</p><p><img src="C:\Users\rongxiang\Desktop\spark_Merory_Manager\example_ui.PNG" alt="example_ui"></p><p>接下来我们使用之前理论进行计算：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Spark任务提交参数</span></span><br><span class="line">spark.executor.memory=1g</span><br><span class="line">spark.memory.fraction=0.6</span><br><span class="line">spark.memory.storageFraction=0.5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 堆内存</span></span><br><span class="line">Java Heap Memory = 1 GB = 1 * 1024 MB = 1024 MB</span><br><span class="line"><span class="meta">#</span><span class="bash"> 保留内存</span></span><br><span class="line">Reserved Memory = 300 MB</span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line">Usable Memory = (Java Heap Memory — Reserved Memory)= 1024 MB - 300 MB = 724 MB</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">Other Memory = Usable Memory * (1.0 — spark.memory.fraction) </span><br><span class="line">            = 724 MB * (1.0 - 0.6) = 724 MB * 0.4 </span><br><span class="line">            = 289.6 MB</span><br><span class="line"></span><br><span class="line">Spark Memory = Usable Memory * spark.memory.fraction</span><br><span class="line">             = 724 MB * 0.6 </span><br><span class="line">             = 434.4 MB</span><br><span class="line"></span><br><span class="line">Spark Storage Memory = Spark Memory * spark.memory.storageFraction</span><br><span class="line">                     = 434.4 MB * 0.5 = 217.2 MB</span><br><span class="line"></span><br><span class="line">Spark Execution Memory = Spark Memory * (1.0 - spark.memory.storageFraction)</span><br><span class="line">                       = 434.4 MB * ( 1 - 0.5) = 434.4 MB</span><br></pre></td></tr></table></figure><p>这个计算结果（<code>Spark Storage Memory=217.2 MB</code>）和<code>UI</code>显示的<code>Storage Memory（384.1MB）</code>有很大差距的。事实上<code>UI</code>中的<code>Storage Memory = Spark Storage Memory+Spark Execution Memory</code>，即<code>434.4 MB</code>。</p><p>但是这个结果和<code>UI</code>仍然有差异。我们查看<code>Spark</code>的源码发现可用内存（<code>Usable Memory</code>）的计算方法并不是堆栈内存，而是<code>Runtime.getRuntime.maxMemory</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.spark.memory.UnifiedMemoryManager</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> def <span class="title">getMaxMemory</span><span class="params">(conf: SparkConf)</span>: Long </span>= &#123;</span><br><span class="line">  val systemMemory = conf.getLong(<span class="string">"spark.testing.memory"</span>, Runtime.getRuntime.maxMemory)</span><br><span class="line">  val reservedMemory = conf.getLong(<span class="string">"spark.testing.reservedMemory"</span>,</span><br><span class="line">        <span class="keyword">if</span> (conf.contains(<span class="string">"spark.testing"</span>)) <span class="number">0</span> <span class="keyword">else</span> RESERVED_SYSTEM_MEMORY_BYTES)</span><br><span class="line">  val usableMemory = systemMemory - reservedMemory</span><br><span class="line">  val memoryFraction = conf.getDouble(<span class="string">"spark.memory.fraction"</span>, <span class="number">0.6</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//获取最大的内存值</span></span><br><span class="line">  (usableMemory * memoryFraction).toLong</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Java</code> 虚拟机中（<code>JDK8</code>）堆栈内存被划分为新生代（<code>NewGen</code>）和老年代（<code>OldGen</code> ），而新生代又被划分为：<code>Eden</code>、<code>From Survivor</code>、<code>To Survivor</code>。即有下面公式：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ExecutorMemory</span> =  Eden + <span class="number">2</span> * Survivor + OldGen  = <span class="number">1</span>G</span><br><span class="line"><span class="attr">systemMemory</span> = Runtime.getRuntime.maxMemory=ExecutorMemory - Survivor</span><br></pre></td></tr></table></figure><p>所以<code>UI</code>显示的大小会略小于上面计算的结果，属于正常。</p><h4 id="1-2-3-动态占用模式"><a href="#1-2-3-动态占用模式" class="headerlink" title="1.2.3 动态占用模式"></a>1.2.3 动态占用模式</h4><p>统一内存管理模式最大新颖点，就是动态占用机制的引入。在实际生产线上<code>Spark</code>任务运行时，数据计算是动态变化的，无法在任务运行前合理的分配好资源，动态占用模式正是解决该需求场景的。</p><p>动态占用机制的规则如下：</p><ul><li><code>Spark</code>任序提交时，根据<code>spark.memory.storageFraction</code> 参数设置<code>Storage</code>内存和<code>Execution</code>内存 （初始化）。</li><li>运行时，如果<code>Storage</code>内存和<code>Execution</code>内存的空间均不够（标准是：存储空间不够放下一个完整的块（<code>Block</code>）），会根据<code>LRU</code>缓存策略，将数据存储到磁盘。若一方空间不足，而对方空间空余时，可借用对方的空间。</li><li><code>Storage</code>占用对方的内存，会将占用的部分转移到硬盘上，然后“归还”借来的空间。</li><li><code>Execution</code>占用了对方的内存时，却无法立刻“归还”借来的空间，只能等待释放。由于<code>Shuffle</code>过程生成的数据（本质是文件）会在后面使用，而<code>Cache</code>中的数据不一定会在后面使用，因此回收内存可能会导致性能严重下降。</li></ul><p><img src="C:\Users\rongxiang\Desktop\spark_Merory_Manager\20200604212151736.png" alt="20200604212151736"></p><h4 id="1-2-3-对比"><a href="#1-2-3-对比" class="headerlink" title="1.2.3 对比"></a>1.2.3 对比</h4><p>最后表格对比一下堆内堆外内存，<code>Auto</code>的自动但管理不精细。</p><table><thead><tr><th>内存类别</th><th>管理方式</th><th>对比</th></tr></thead><tbody><tr><td>on-heap</td><td>由JVM管理</td><td>受到JVM GC管理，容易OOM</td></tr><tr><td>off-heap</td><td>手动管（spark）</td><td>用户编写内存申请和释放的逻辑</td></tr></tbody></table><h2 id="第二部分-Spark内存优化"><a href="#第二部分-Spark内存优化" class="headerlink" title="第二部分 Spark内存优化"></a>第二部分 Spark内存优化</h2><p>讲完枯燥的理论后，我们要使用这些理论指导日常的研发调优、生产问题的分析定位。即理论指导实践，解决问题才是目的。</p><p>通常我们说<code>Spark</code>是基于内存计算的，但是并不是说所有的数据对象都是缓存在内存中的。如果数据量较大但是内存资源不足的场景下，<code>Spark</code>仍然会把数据缓存在磁盘中。为了提升任务运行效率，需要尽量避免缓存数据溢出（<code>Spill</code>）到磁盘。那么如何判断<code>Spark</code>任务的内存资源管理是合适的？</p><p>（1）Storage界面中发现缓存cache中数据已经开始缓存在磁盘上（Size on Disk）。这时候说明预留在缓存的内存 Storage内存给少了。</p><p>（2）stage执行下的若干个task中，shuffle spill（memory）中，甚至在shuffle spill（disk）的时候，说明给执行Executor的内存少了。</p><p>使用建议<br>首先，建议使用新模式，所以接下来的配置建议都是基于新模式的。</p><p>spark.memory.fraction：如果 application spill 或踢除 block 发生的频率过高（可通过日志观察），可以适当调大该值，这样 execution 和 storage 的总可用内存变大，能有效减少发生 spill 和踢除 block 的频率</p><p>spark.memory.storageFraction：为 storage 占 storage、execution 内存总和的比例。虽然新方案中 storage 和 execution 之间可以发生内存借用，但总的来说，spark.memory.storageFraction 越大，运行过程中，storage 能用的内存就会越多。所以，如果你的 app 是更吃 storage 内存的，把这个值调大一点；如果是更吃 execution 内存的，把这个值调小一点</p><p>spark.memory.offHeap.enabled：堆外内存最大的好处就是可以避免 GC，如果你希望使用堆外内存，将该值置为 true 并设置堆外内存的大小，即设置<br>spark.memory.offHeap.size，这是必须的</p><p>另外，需要特别注意的是，堆外内存的大小不会算在 executor memory 中，也就是说加入你设置了 –executor memory 10G 和 -spark.memory.offHeap.size=10G，那总共可以使用 20G 内存，堆内和堆外分别 10G。</p><p><a href="https://github.com/YunKillerE/troubleshooting-and-optimization/blob/master/Spark%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/spark%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C.md" target="_blank" rel="noopener">https://github.com/YunKillerE/troubleshooting-and-optimization/blob/master/Spark%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/spark%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C.md</a></p><p><a href="http://bcxw.net/article/441.html" target="_blank" rel="noopener">http://bcxw.net/article/441.html</a></p><p><a href="https://xie.infoq.cn/article/bc5aaeac0e80b76ab0e0954e3" target="_blank" rel="noopener">https://xie.infoq.cn/article/bc5aaeac0e80b76ab0e0954e3</a></p><h2 id="第四部分-线上问题排查"><a href="#第四部分-线上问题排查" class="headerlink" title="第四部分 线上问题排查"></a>第四部分 线上问题排查</h2><p>RDD的持久化机制</p><h2 id="第五部分-附录"><a href="#第五部分-附录" class="headerlink" title="第五部分 附录"></a>第五部分 附录</h2><h3 id="5-1-执行内存的管理"><a href="#5-1-执行内存的管理" class="headerlink" title="5.1 执行内存的管理"></a>5.1 执行内存的管理</h3><h2 id="参考文献及资料"><a href="#参考文献及资料" class="headerlink" title="参考文献及资料"></a>参考文献及资料</h2><p>1、《Deep Dive: Apache Spark Memory Management》介绍视频，链接：<a href="https://youtu.be/dPHrykZL8Cg" target="_blank" rel="noopener">https://youtu.be/dPHrykZL8Cg</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分 Spark内存管理详解&lt;/li&gt;
&lt;li&gt;第二部分 Spark参数说明&lt;/li&gt;
&lt;li&gt;第三
      
    
    </summary>
    
      <category term="Spring" scheme="https://zjrongxiang.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Python语言温习总结</title>
    <link href="https://zjrongxiang.github.io/2021/11/16/2021-12-18-Python%E8%AF%AD%E8%A8%80%E6%B8%A9%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://zjrongxiang.github.io/2021/11/16/2021-12-18-Python语言温习总结/</id>
    <published>2021-11-16T05:30:00.000Z</published>
    <updated>2021-12-18T10:52:51.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>背景</li><li>第一部分 基础环境准备</li><li>第二部分 开发环境项目部署</li><li>第三部分 生产部署</li><li>第四部分  总结</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="参考文献及资料"><a href="#参考文献及资料" class="headerlink" title="参考文献及资料"></a>参考文献及资料</h2><p>1、<code>RuoYi-Cloud</code>项目文档，链接：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分 基础环境准备&lt;/li&gt;
&lt;li&gt;第二部分 开发环境项目部署&lt;/li&gt;
&lt;li&gt;第三部分 生产部
      
    
    </summary>
    
      <category term="Spring" scheme="https://zjrongxiang.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spark中Shuffle详解</title>
    <link href="https://zjrongxiang.github.io/2021/11/16/2022-01-03-Spark%E4%B8%ADShuffle%E8%AF%A6%E8%A7%A3/"/>
    <id>https://zjrongxiang.github.io/2021/11/16/2022-01-03-Spark中Shuffle详解/</id>
    <published>2021-11-16T05:30:00.000Z</published>
    <updated>2022-01-20T00:12:16.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>背景</li><li>第一部分 Spark内存管理详解</li><li>第二部分 Spark参数说明</li><li>第三部分 Spark内存优化</li><li>第四部分 常见线上问题解决</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Shuffle英文中含义是：“洗牌”，这个含义和分布式大数据计算框架有什么联系呢？我们先从大数据计算的”Hello World”案例讲解。</p><p>给定一个英文文本文件（存储在分布式文件系统中），然后计算每个单词的词频。这是我们运行大数据计算框架最常用的案例。通常我们将每个单词作为键（key），出现的频率为1，这样就有一个键值对（例如：{“the”:1}）。最后我们将相同键值进行合并统计即可。但是在分布式处理场景下，如何统计分布在不同节点的键值对呢？唯一的办法就是需要把相同的键值对收集到同一个节点进行汇总计算求和。</p><p>这个计算过程中（参考下图），收集各个节点键值对，并分发到同个节点汇总的过程，就是Shuffle。相当于对数据进行从“洗牌”。</p><p><img src="D:\myblog\source\_posts\images\picture\shuffle\wordcount.png" alt="wordcount"></p><p>注：相同的键值会被分发到相同的<code>reduce</code>计算节点。</p><p>在分布式计算框架中，Shuffle的过程代价比较大，因为数据的重分配，意味着数据在磁盘、内存中的I/O以及节点通信中的网络I/O。所以Shuffle阶段的设计优劣是决定一个分布式计算框架优劣的关键因素。</p><h2 id="第一部分-Shuffle概述"><a href="#第一部分-Shuffle概述" class="headerlink" title="第一部分 Shuffle概述"></a>第一部分 Shuffle概述</h2><h3 id="1-1-MapReduce-shuffle"><a href="#1-1-MapReduce-shuffle" class="headerlink" title="1.1 MapReduce shuffle"></a>1.1 MapReduce shuffle</h3><p>上文我们案例其实是MapReduce计算框架。在MapReduce计算框架中Shuffle阶段是链接Map和Reduce之间的桥梁。Spark是基于MapReduce思想实现的计算框架，同样也存在shuffle流程。</p><p>在正式介绍Spark shuffle前，我们先引用介绍MapReduce shuffle过程来作为入门和比较。下图简要展示了MapReduce框架中Shuffle流程（图中黑框部分）。</p><p><img src="D:\myblog\source\_posts\images\picture\shuffle\20200418124907838.png" alt="20200418124907838"></p><p>MapReduce中，根据处理特点，将Shuffle分为两个子阶段：Map端和Reduce端。</p><ul><li><p>Map端</p><ol><li>环形内存缓存区：每个split数据交由一个map任务处理，map的处理结果不会直接写到硬盘上，会先输送到环形内存缓存区中，默认的大小是100M（可通过配置修改），当缓冲区的内容达到80%后会开始溢出，此时缓存区的溢出内容会被写到磁盘上，形成一个个spill file，注意这个文件没有固定大小。</li><li>在内存中经过分区、排序后溢出到磁盘：分区主要功能是用来指定 map 的输出结果交给哪个 reduce 任务处理，默认是通过 map 输出结果的 key 值取hashcode 对代码中配置的 redue task数量取模运算，值一样的分到一个区，也就是一个 reduce 任务对应一个分区的数据。这样做的好处就是可以避免有的 reduce 任务分配到大量的数据，而有的 reduce 任务只分配到少量甚至没有数据，平均 reduce 的处理能力。并且在每一个分区（partition）中，都会有一个 sort by key 排序，如果此时设置了 Combiner，将排序后的结果进行 Combine 操作，相当于 map 阶段的本地 reduce，这样做的目的是让尽可能少的数据写入到磁盘。</li><li>合并溢出文件：随着 map 任务的执行，不断溢出文件，直到输出最后一个记录，可能会产生大量的溢出文件，这时需要对这些大量的溢出文件进行合并，在合并文件的过程中会不断的进行排序跟 Combine 操作，这样做有两个好处：减少每次写入磁盘的数据量&amp;减少下一步 reduce 阶段网络传输的数据量。最后合并成了一个分区且排序的大文件，此时可以再进行配置压缩处理，可以减少不同节点间的网络传输量。合并完成后着手将数据拷贝给相对应的reduce 处理，那么要怎么找到分区数据对应的那个 reduce 任务呢？简单来说就是 JobTracker 中保存了整个集群中的宏观信息，只要 reduce 任务向 JobTracker 获取对应的 map 输出位置就可以了。具体请参考上方的MapReduce工作原理。</li></ol></li><li><p>Reduce端</p><p>reduce 会接收到不同 map 任务传来的有序数据，如果 reduce 接收到的数据较小，则会存在内存缓冲区中，直到数据量达到该缓存区的一定比例时对数据进行合并后溢写到磁盘上。随着溢写的文件越来越多，后台的线程会将他们合并成一个更大的有序的文件，可以为后面合并节省时间。这其实跟 map端的操作一样，都是反复的进行排序、合并，这也是 Hadoop 的灵魂所在，但是如果在 map 已经压缩过，在合并排序之前要先进行解压缩。合并的过程会产生很多中间文件，但是最后一个合并的结果是不需要写到磁盘上，而是可以直接输入到 reduce 函数中计算，每个 reduce 对应一个输出结果文件。</p></li></ul><p>Spark根据RDD的宽依赖划分stage，stage中又包含了task。每个stage中的task依赖上游stage中task的输出，上游task落盘称为shuffle写，下游task读称为shuffle读，上游task相当于MR的map阶段，下游task相当于MR的reduce阶段。不同stage间task的读写构成了spark的shuffle流程。</p><p>下游task（reduce端）会去上游task（map端）所在节点读取自己需要的分区数据。整个过程涉及到序列化、磁盘IO等操作。</p><p><code>shuffle write</code> - <em>Data move from Executor(s) to another Executor(s)</em> - is used when data needs to move between executors (e.g. due to JOIN, groupBy, etc)</p><h2 id="第二部分-Shuffle的框架"><a href="#第二部分-Shuffle的框架" class="headerlink" title="第二部分 Shuffle的框架"></a>第二部分 Shuffle的框架</h2><h3 id="2-1-Shuffle框架的演进"><a href="#2-1-Shuffle框架的演进" class="headerlink" title="2.1 Shuffle框架的演进"></a>2.1 Shuffle框架的演进</h3><p>Spark Shuffle历史节点<br>Spark 0.8及以前 Hash Based Shuffle<br>Spark 0.8.1 为Hash Based Shuffle引入File Consolidation机制<br>Spark 0.9 引入ExternalAppendOnlyMap<br>Spark 1.1 引入Sort Based Shuffle，但默认仍为Hash Based Shuffle<br>Spark 1.2 默认的Shuffle方式改为Sort Based Shuffle<br>Spark 1.4 引入Tungsten-Sort Based Shuffle<br>Spark 1.6 Tungsten-sort并入Sort Based Shuffle<br>Spark 2.0 Hash Based Shuffle退出历史舞台</p><p><a href="https://blog.csdn.net/ifenggege/article/details/107968518" target="_blank" rel="noopener">https://blog.csdn.net/ifenggege/article/details/107968518</a></p><h3 id="2-2-Shuffle框架内核"><a href="#2-2-Shuffle框架内核" class="headerlink" title="2.2 Shuffle框架内核"></a>2.2 Shuffle框架内核</h3><h2 id="第三部分-基于Hash的Shuffle"><a href="#第三部分-基于Hash的Shuffle" class="headerlink" title="第三部分 基于Hash的Shuffle"></a>第三部分 基于Hash的Shuffle</h2><h2 id="第四部分-基于Sort的Shuffle"><a href="#第四部分-基于Sort的Shuffle" class="headerlink" title="第四部分 基于Sort的Shuffle"></a>第四部分 基于Sort的Shuffle</h2><h2 id="第四部分-基于Tungsten的Shuffle"><a href="#第四部分-基于Tungsten的Shuffle" class="headerlink" title="第四部分 基于Tungsten的Shuffle"></a>第四部分 基于Tungsten的Shuffle</h2><p><a href="https://0x0fff.com/spark-architecture-shuffle/" target="_blank" rel="noopener">https://0x0fff.com/spark-architecture-shuffle/</a></p><h2 id="参考文献及资料"><a href="#参考文献及资料" class="headerlink" title="参考文献及资料"></a>参考文献及资料</h2><p>1、<code>RuoYi-Cloud</code>项目文档，链接：<a href="https://blog.csdn.net/ifenggege/article/details/107968518" target="_blank" rel="noopener">https://blog.csdn.net/ifenggege/article/details/107968518</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分 Spark内存管理详解&lt;/li&gt;
&lt;li&gt;第二部分 Spark参数说明&lt;/li&gt;
&lt;li&gt;第三
      
    
    </summary>
    
      <category term="Spring" scheme="https://zjrongxiang.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spark中类型推断</title>
    <link href="https://zjrongxiang.github.io/2021/11/16/2022-01-13-Spark%E4%B8%AD%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>https://zjrongxiang.github.io/2021/11/16/2022-01-13-Spark中类型推断 - 副本/</id>
    <published>2021-11-16T05:30:00.000Z</published>
    <updated>2022-01-14T04:51:40.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>背景</li><li>第一部分 Spark内存管理详解</li><li>第二部分 Spark参数说明</li><li>第三部分 Spark内存优化</li><li>第四部分 常见线上问题解决</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>请注意，会自动推断分区列的数据类型。目前，支持数字数据类型和字符串类型。有些用户可能不想自动推断分区列的数据类型。对于这些用例，自动类型推断可以由spark.sql.sources.partitionColumnTypeInference.enabled配置，默认值为true。当禁用类型推断时，字符串类型将用于分区列。</p><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><p><a href="https://www.cnblogs.com/yurunmiao/p/4934053.html" target="_blank" rel="noopener">https://www.cnblogs.com/yurunmiao/p/4934053.html</a></p><h2 id="参考文献及资料"><a href="#参考文献及资料" class="headerlink" title="参考文献及资料"></a>参考文献及资料</h2><p>1、<code>RuoYi-Cloud</code>项目文档，链接：<a href="https://blog.csdn.net/ifenggege/article/details/107968518" target="_blank" rel="noopener">https://blog.csdn.net/ifenggege/article/details/107968518</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分 Spark内存管理详解&lt;/li&gt;
&lt;li&gt;第二部分 Spark参数说明&lt;/li&gt;
&lt;li&gt;第三
      
    
    </summary>
    
      <category term="Spring" scheme="https://zjrongxiang.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>若依spring-cloud项目源码阅读解析</title>
    <link href="https://zjrongxiang.github.io/2021/11/16/2021-11-16-%E8%8B%A5%E4%BE%9Dspring-cloud%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%A7%A3%E6%9E%90/"/>
    <id>https://zjrongxiang.github.io/2021/11/16/2021-11-16-若依spring-cloud项目源码阅读解析/</id>
    <published>2021-11-16T05:30:00.000Z</published>
    <updated>2021-11-16T13:22:35.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>背景</li><li>第一部分 基础环境准备</li><li>第二部分 开发环境项目部署</li><li>第三部分 生产部署</li><li>第四部分  总结</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="第一部分-权限系统设计"><a href="#第一部分-权限系统设计" class="headerlink" title="第一部分 权限系统设计"></a>第一部分 权限系统设计</h2><p><a href="https://blog.csdn.net/starzhou/article/details/121232710" target="_blank" rel="noopener">https://blog.csdn.net/starzhou/article/details/121232710</a></p><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><h2 id="第三部分-服务调用Feign"><a href="#第三部分-服务调用Feign" class="headerlink" title="第三部分 服务调用Feign"></a>第三部分 服务调用Feign</h2><h2 id="参考文献及资料"><a href="#参考文献及资料" class="headerlink" title="参考文献及资料"></a>参考文献及资料</h2><p>1、<code>RuoYi-Cloud</code>项目文档，链接：<a href="http://doc.ruoyi.vip/ruoyi-cloud/" target="_blank" rel="noopener">http://doc.ruoyi.vip/ruoyi-cloud/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分 基础环境准备&lt;/li&gt;
&lt;li&gt;第二部分 开发环境项目部署&lt;/li&gt;
&lt;li&gt;第三部分 生产部
      
    
    </summary>
    
      <category term="Spring" scheme="https://zjrongxiang.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Python语言PEP8规范（翻译）</title>
    <link href="https://zjrongxiang.github.io/2021/11/16/2021-12-18-Python%E8%AF%AD%E8%A8%80PEP8%E8%A7%84%E8%8C%83/"/>
    <id>https://zjrongxiang.github.io/2021/11/16/2021-12-18-Python语言PEP8规范/</id>
    <published>2021-11-16T05:30:00.000Z</published>
    <updated>2021-12-18T11:35:07.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>背景</li><li>第一部分 基础环境准备</li><li>第二部分 开发环境项目部署</li><li>第三部分 生产部署</li><li>第四部分  总结</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Contents</p><ul><li><a href="https://www.python.org/dev/peps/pep-0008/#introduction" target="_blank" rel="noopener">Introduction</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds" target="_blank" rel="noopener">A Foolish Consistency is the Hobgoblin of Little Minds</a></li><li>Code Lay-out<ul><li><a href="https://www.python.org/dev/peps/pep-0008/#indentation" target="_blank" rel="noopener">Indentation</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces" target="_blank" rel="noopener">Tabs or Spaces?</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length" target="_blank" rel="noopener">Maximum Line Length</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#should-a-line-break-before-or-after-a-binary-operator" target="_blank" rel="noopener">Should a Line Break Before or After a Binary Operator?</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#blank-lines" target="_blank" rel="noopener">Blank Lines</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#source-file-encoding" target="_blank" rel="noopener">Source File Encoding</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#imports" target="_blank" rel="noopener">Imports</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#module-level-dunder-names" target="_blank" rel="noopener">Module Level Dunder Names</a></li></ul></li><li><a href="https://www.python.org/dev/peps/pep-0008/#string-quotes" target="_blank" rel="noopener">String Quotes</a></li><li>Whitespace in Expressions and Statements<ul><li><a href="https://www.python.org/dev/peps/pep-0008/#pet-peeves" target="_blank" rel="noopener">Pet Peeves</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#other-recommendations" target="_blank" rel="noopener">Other Recommendations</a></li></ul></li><li><a href="https://www.python.org/dev/peps/pep-0008/#when-to-use-trailing-commas" target="_blank" rel="noopener">When to Use Trailing Commas</a></li><li>Comments<ul><li><a href="https://www.python.org/dev/peps/pep-0008/#block-comments" target="_blank" rel="noopener">Block Comments</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#inline-comments" target="_blank" rel="noopener">Inline Comments</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" target="_blank" rel="noopener">Documentation Strings</a></li></ul></li><li>Naming Conventions<ul><li><a href="https://www.python.org/dev/peps/pep-0008/#overriding-principle" target="_blank" rel="noopener">Overriding Principle</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#descriptive-naming-styles" target="_blank" rel="noopener">Descriptive: Naming Styles</a></li><li>Prescriptive: Naming Conventions<ul><li><a href="https://www.python.org/dev/peps/pep-0008/#names-to-avoid" target="_blank" rel="noopener">Names to Avoid</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#ascii-compatibility" target="_blank" rel="noopener">ASCII Compatibility</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#package-and-module-names" target="_blank" rel="noopener">Package and Module Names</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#class-names" target="_blank" rel="noopener">Class Names</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#type-variable-names" target="_blank" rel="noopener">Type Variable Names</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#exception-names" target="_blank" rel="noopener">Exception Names</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#global-variable-names" target="_blank" rel="noopener">Global Variable Names</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" target="_blank" rel="noopener">Function and Variable Names</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#function-and-method-arguments" target="_blank" rel="noopener">Function and Method Arguments</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables" target="_blank" rel="noopener">Method Names and Instance Variables</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#constants" target="_blank" rel="noopener">Constants</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#designing-for-inheritance" target="_blank" rel="noopener">Designing for Inheritance</a></li></ul></li><li><a href="https://www.python.org/dev/peps/pep-0008/#public-and-internal-interfaces" target="_blank" rel="noopener">Public and Internal Interfaces</a></li></ul></li><li>Programming Recommendations<ul><li><a href="https://www.python.org/dev/peps/pep-0008/#function-annotations" target="_blank" rel="noopener">Function Annotations</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#variable-annotations" target="_blank" rel="noopener">Variable Annotations</a></li></ul></li><li><a href="https://www.python.org/dev/peps/pep-0008/#references" target="_blank" rel="noopener">References</a></li><li><a href="https://www.python.org/dev/peps/pep-0008/#copyright" target="_blank" rel="noopener">Copyright</a></li></ul><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a><a href="https://www.python.org/dev/peps/pep-0008/#id12" target="_blank" rel="noopener">简介</a></h1><p>This document gives coding conventions for the Python code comprising the standard library in the main Python distribution. Please see the companion informational PEP describing style guidelines for the C code in the C implementation of Python <a href="https://www.python.org/dev/peps/pep-0008/#id7" target="_blank" rel="noopener">[1]</a>.</p><p>This document and <a href="https://www.python.org/dev/peps/pep-0257" target="_blank" rel="noopener">PEP 257</a> (Docstring Conventions) were adapted from Guido’s original Python Style Guide essay, with some additions from Barry’s style guide <a href="https://www.python.org/dev/peps/pep-0008/#id8" target="_blank" rel="noopener">[2]</a>.</p><p>This style guide evolves over time as additional conventions are identified and past conventions are rendered obsolete by changes in the language itself.</p><p>Many projects have their own coding style guidelines. In the event of any conflicts, such project-specific guides take precedence for that project.</p><h1 id="A-Foolish-Consistency-is-the-Hobgoblin-of-Little-Minds"><a href="#A-Foolish-Consistency-is-the-Hobgoblin-of-Little-Minds" class="headerlink" title="A Foolish Consistency is the Hobgoblin of Little Minds"></a><a href="https://www.python.org/dev/peps/pep-0008/#id13" target="_blank" rel="noopener">A Foolish Consistency is the Hobgoblin of Little Minds</a></h1><p>One of Guido’s key insights is that code is read much more often than it is written. The guidelines provided here are intended to improve the readability of code and make it consistent across the wide spectrum of Python code. As <a href="https://www.python.org/dev/peps/pep-0020" target="_blank" rel="noopener">PEP 20</a> says, “Readability counts”.</p><p>A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is the most important.</p><p>However, know when to be inconsistent – sometimes style guide recommendations just aren’t applicable. When in doubt, use your best judgment. Look at other examples and decide what looks best. And don’t hesitate to ask!</p><p>In particular: do not break backwards compatibility just to comply with this PEP!</p><p>Some other good reasons to ignore a particular guideline:</p><ol><li>When applying the guideline would make the code less readable, even for someone who is used to reading code that follows this PEP.</li><li>To be consistent with surrounding code that also breaks it (maybe for historic reasons) – although this is also an opportunity to clean up someone else’s mess (in true XP style).</li><li>Because the code in question predates the introduction of the guideline and there is no other reason to be modifying that code.</li><li>When the code needs to remain compatible with older versions of Python that don’t support the feature recommended by the style guide.</li></ol><h1 id="代码布局"><a href="#代码布局" class="headerlink" title="代码布局"></a><a href="https://www.python.org/dev/peps/pep-0008/#id14" target="_blank" rel="noopener">代码布局</a></h1><h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a><a href="https://www.python.org/dev/peps/pep-0008/#id15" target="_blank" rel="noopener">缩进</a></h2><p>Use 4 spaces per indentation level.</p><p>每级缩进使用4个空格。</p><p>注：使用空格（space）来表示缩进，避免使用制表符（tab）</p><p>Continuation lines should align wrapped elements either vertically using Python’s implicit line joining inside parentheses, brackets and braces, or using a <em>hanging indent</em> <a href="https://www.python.org/dev/peps/pep-0008/#fn-hi" target="_blank" rel="noopener">[6]</a>. When using a hanging indent the following should be considered; there should be no arguments on the first line and further indentation should be used to clearly distinguish itself as a continuation line:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Correct:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Aligned with opening delimiter.</span></span><br><span class="line">foo = long_function_name(var_one, var_two,</span><br><span class="line">                         var_three, var_four)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_function_name</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        var_one, var_two, var_three,</span></span></span><br><span class="line"><span class="function"><span class="params">        var_four)</span>:</span></span><br><span class="line">    print(var_one)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Hanging indents should add a level.</span></span><br><span class="line">foo = long_function_name(</span><br><span class="line">    var_one, var_two,</span><br><span class="line">    var_three, var_four)</span><br><span class="line"><span class="comment"># Wrong:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arguments on first line forbidden when not using vertical alignment.</span></span><br><span class="line">foo = long_function_name(var_one, var_two,</span><br><span class="line">    var_three, var_four)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Further indentation required as indentation is not distinguishable.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_function_name</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    var_one, var_two, var_three,</span></span></span><br><span class="line"><span class="function"><span class="params">    var_four)</span>:</span></span><br><span class="line">    print(var_one)</span><br></pre></td></tr></table></figure><p>The 4-space rule is optional for continuation lines.</p><p>Optional:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hanging indents *may* be indented to other than 4 spaces.</span></span><br><span class="line">foo = long_function_name(</span><br><span class="line">  var_one, var_two,</span><br><span class="line">  var_three, var_four)</span><br></pre></td></tr></table></figure><p>When the conditional part of an <code>if</code>-statement is long enough to require that it be written across multiple lines, it’s worth noting that the combination of a two character keyword (i.e. <code>if</code>), plus a single space, plus an opening parenthesis creates a natural 4-space indent for the subsequent lines of the multiline conditional. This can produce a visual conflict with the indented suite of code nested inside the <code>if</code>-statement, which would also naturally be indented to 4 spaces. This PEP takes no explicit position on how (or whether) to further visually distinguish such conditional lines from the nested suite inside the <code>if</code>-statement. Acceptable options in this situation include, but are not limited to:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">No</span> extra indentation.</span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing <span class="keyword">and</span></span><br><span class="line">    that_is_another_thing):</span><br><span class="line">    do_something()</span><br><span class="line"></span><br><span class="line"># <span class="keyword">Add</span> a <span class="keyword">comment</span>, which will provide <span class="keyword">some</span> distinction <span class="keyword">in</span> editors</span><br><span class="line"># supporting syntax highlighting.</span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing <span class="keyword">and</span></span><br><span class="line">    that_is_another_thing):</span><br><span class="line">    # Since <span class="keyword">both</span> conditions are <span class="keyword">true</span>, we can frobnicate.</span><br><span class="line">    do_something()</span><br><span class="line"></span><br><span class="line"># <span class="keyword">Add</span> <span class="keyword">some</span> extra indentation <span class="keyword">on</span> the conditional continuation <span class="type">line</span>.</span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing</span><br><span class="line">        <span class="keyword">and</span> that_is_another_thing):</span><br><span class="line">    do_something()</span><br></pre></td></tr></table></figure><p>(Also see the discussion of whether to break before or after binary operators below.)</p><p>The closing brace/bracket/parenthesis on multiline constructs may either line up under the first non-whitespace character of the last line of list, as in:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_list = [</span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line">    ]</span><br><span class="line"><span class="built_in">result</span> = some_function_that_takes_arguments(</span><br><span class="line">    <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>or it may be lined up under the first character of the line that starts the multiline construct, as in:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_list = [</span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line">]</span><br><span class="line"><span class="built_in">result</span> = some_function_that_takes_arguments(</span><br><span class="line">    <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Tabs-or-Spaces"><a href="#Tabs-or-Spaces" class="headerlink" title="Tabs or Spaces?"></a><a href="https://www.python.org/dev/peps/pep-0008/#id16" target="_blank" rel="noopener">Tabs or Spaces?</a></h2><p>Spaces are the preferred indentation method.</p><p>Tabs should be used solely to remain consistent with code that is already indented with tabs.</p><p>Python disallows mixing tabs and spaces for indentation.</p><h2 id="Maximum-Line-Length"><a href="#Maximum-Line-Length" class="headerlink" title="Maximum Line Length"></a><a href="https://www.python.org/dev/peps/pep-0008/#id17" target="_blank" rel="noopener">Maximum Line Length</a></h2><p>Limit all lines to a maximum of 79 characters.</p><p>For flowing long blocks of text with fewer structural restrictions (docstrings or comments), the line length should be limited to 72 characters.</p><p>Limiting the required editor window width makes it possible to have several files open side by side, and works well when using code review tools that present the two versions in adjacent columns.</p><p>The default wrapping in most tools disrupts the visual structure of the code, making it more difficult to understand. The limits are chosen to avoid wrapping in editors with the window width set to 80, even if the tool places a marker glyph in the final column when wrapping lines. Some web based tools may not offer dynamic line wrapping at all.</p><p>Some teams strongly prefer a longer line length. For code maintained exclusively or primarily by a team that can reach agreement on this issue, it is okay to increase the line length limit up to 99 characters, provided that comments and docstrings are still wrapped at 72 characters.</p><p>The Python standard library is conservative and requires limiting lines to 79 characters (and docstrings/comments to 72).</p><p>The preferred way of wrapping long lines is by using Python’s implied line continuation inside parentheses, brackets and braces. Long lines can be broken over multiple lines by wrapping expressions in parentheses. These should be used in preference to using a backslash for line continuation.</p><p>Backslashes may still be appropriate at times. For example, long, multiple <code>with</code>-statements cannot use implicit continuation, so backslashes are acceptable:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open('/path/<span class="keyword">to</span>/<span class="keyword">some</span>/<span class="built_in">file</span>/you/want/<span class="keyword">to</span>/<span class="built_in">read</span>') <span class="keyword">as</span> file_1, \</span><br><span class="line">     open('/path/<span class="keyword">to</span>/<span class="keyword">some</span>/<span class="built_in">file</span>/being/written', 'w') <span class="keyword">as</span> file_2:</span><br><span class="line">    file_2.<span class="built_in">write</span>(file_1.<span class="built_in">read</span>())</span><br></pre></td></tr></table></figure><p>(See the previous discussion on <a href="https://www.python.org/dev/peps/pep-0008/#multiline-if-statements" target="_blank" rel="noopener">multiline if-statements</a> for further thoughts on the indentation of such multiline <code>with</code>-statements.)</p><p>Another such case is with <code>assert</code> statements.</p><p>Make sure to indent the continued line appropriately.</p><h2 id="Should-a-Line-Break-Before-or-After-a-Binary-Operator"><a href="#Should-a-Line-Break-Before-or-After-a-Binary-Operator" class="headerlink" title="Should a Line Break Before or After a Binary Operator?"></a><a href="https://www.python.org/dev/peps/pep-0008/#id18" target="_blank" rel="noopener">Should a Line Break Before or After a Binary Operator?</a></h2><p>For decades the recommended style was to break after binary operators. But this can hurt readability in two ways: the operators tend to get scattered across different columns on the screen, and each operator is moved away from its operand and onto the previous line. Here, the eye has to do extra work to tell which items are added and which are subtracted:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wrong:</span></span><br><span class="line"><span class="comment"># operators sit far away from their operands</span></span><br><span class="line"><span class="attr">income</span> = <span class="string">(gross_wages +</span></span><br><span class="line">          <span class="attr">taxable_interest</span> <span class="string">+</span></span><br><span class="line">          <span class="meta">(dividends</span> <span class="string">- qualified_dividends) -</span></span><br><span class="line">          <span class="attr">ira_deduction</span> <span class="string">-</span></span><br><span class="line">          <span class="attr">student_loan_interest)</span></span><br></pre></td></tr></table></figure><p>To solve this readability problem, mathematicians and their publishers follow the opposite convention. Donald Knuth explains the traditional rule in his <em>Computers and Typesetting</em> series: “Although formulas within a paragraph always break after binary operations and relations, displayed formulas always break before binary operations” <a href="https://www.python.org/dev/peps/pep-0008/#id9" target="_blank" rel="noopener">[3]</a>.</p><p>Following the tradition from mathematics usually results in more readable code:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Correct:</span></span><br><span class="line"><span class="comment"># easy to match operators with operands</span></span><br><span class="line">income = (gross_wages</span><br><span class="line">          + taxable_interest</span><br><span class="line">          + (dividends - qualified_dividends)</span><br><span class="line">          - ira_deduction</span><br><span class="line">          - student_loan_interest)</span><br></pre></td></tr></table></figure><p>In Python code, it is permissible to break before or after a binary operator, as long as the convention is consistent locally. For new code Knuth’s style is suggested.</p><h2 id="Blank-Lines"><a href="#Blank-Lines" class="headerlink" title="Blank Lines"></a><a href="https://www.python.org/dev/peps/pep-0008/#id19" target="_blank" rel="noopener">Blank Lines</a></h2><p>Surround top-level function and class definitions with two blank lines.</p><p>Method definitions inside a class are surrounded by a single blank line.</p><p>Extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations).</p><p>Use blank lines in functions, sparingly, to indicate logical sections.</p><p>Python accepts the control-L (i.e. ^L) form feed character as whitespace; Many tools treat these characters as page separators, so you may use them to separate pages of related sections of your file. Note, some editors and web-based code viewers may not recognize control-L as a form feed and will show another glyph in its place.</p><h2 id="Source-File-Encoding"><a href="#Source-File-Encoding" class="headerlink" title="Source File Encoding"></a><a href="https://www.python.org/dev/peps/pep-0008/#id20" target="_blank" rel="noopener">Source File Encoding</a></h2><p>Code in the core Python distribution should always use UTF-8, and should not have an encoding declaration.</p><p>In the standard library, non-UTF-8 encodings should be used only for test purposes. Use non-ASCII characters sparingly, preferably only to denote places and human names. If using non-ASCII characters as data, avoid noisy Unicode characters like z̯̯͡a̧͎̺l̡͓̫g̹̲o̡̼̘ and byte order marks.</p><p>All identifiers in the Python standard library MUST use ASCII-only identifiers, and SHOULD use English words wherever feasible (in many cases, abbreviations and technical terms are used which aren’t English).</p><p>Open source projects with a global audience are encouraged to adopt a similar policy.</p><h2 id="Imports"><a href="#Imports" class="headerlink" title="Imports"></a><a href="https://www.python.org/dev/peps/pep-0008/#id21" target="_blank" rel="noopener">Imports</a></h2><ul><li><p>Imports should usually be on separate lines:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Correct:</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Wrong:</span></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br></pre></td></tr></table></figure><p>It’s okay to say this though:</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Correct:</span><br><span class="line"><span class="symbol">from</span> <span class="keyword">subprocess </span><span class="meta">import</span> <span class="keyword">Popen, </span>PIPE</span><br></pre></td></tr></table></figure></li><li><p>Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants.</p><p>Imports should be grouped in the following order:</p><ol><li>Standard library imports.</li><li>Related third party imports.</li><li>Local application/library specific imports.</li></ol><p>You should put a blank line between each group of imports.</p></li><li><p>Absolute imports are recommended, as they are usually more readable and tend to be better behaved (or at least give better error messages) if the import system is incorrectly configured (such as when a directory inside a package ends up on <code>sys.path</code>):</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mypkg.sibling</span><br><span class="line"><span class="title">from</span> mypkg <span class="keyword">import</span> sibling</span><br><span class="line"><span class="title">from</span> mypkg.sibling <span class="keyword">import</span> example</span><br></pre></td></tr></table></figure><p>However, explicit relative imports are an acceptable alternative to absolute imports, especially when dealing with complex package layouts where using absolute imports would be unnecessarily verbose:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> sibling</span><br><span class="line"><span class="keyword">from</span> .sibling <span class="keyword">import</span> example</span><br></pre></td></tr></table></figure><p>Standard library code should avoid complex package layouts and always use absolute imports.</p></li><li><p>When importing a class from a class-containing module, it’s usually okay to spell this:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> myclass <span class="keyword">import</span> MyClass</span><br><span class="line"><span class="keyword">from</span> foo.bar.yourclass <span class="keyword">import</span> YourClass</span><br></pre></td></tr></table></figure><p>If this spelling causes local name clashes, then spell them explicitly:</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> myclass</span><br><span class="line"><span class="keyword">import</span> foo.bar.yourclass</span><br></pre></td></tr></table></figure><p>and use “myclass.MyClass” and “foo.bar.yourclass.YourClass”.</p></li><li><p>Wildcard imports (<code>from &lt;module&gt; import *</code>) should be avoided, as they make it unclear which names are present in the namespace, confusing both readers and many automated tools. There is one defensible use case for a wildcard import, which is to republish an internal interface as part of a public API (for example, overwriting a pure Python implementation of an interface with the definitions from an optional accelerator module and exactly which definitions will be overwritten isn’t known in advance).</p><p>When republishing names this way, the guidelines below regarding public and internal interfaces still apply.</p></li></ul><h2 id="Module-Level-Dunder-Names"><a href="#Module-Level-Dunder-Names" class="headerlink" title="Module Level Dunder Names"></a><a href="https://www.python.org/dev/peps/pep-0008/#id22" target="_blank" rel="noopener">Module Level Dunder Names</a></h2><p>Module level “dunders” (i.e. names with two leading and two trailing underscores) such as <code>__all__</code>, <code>__author__</code>, <code>__version__</code>, etc. should be placed after the module docstring but before any import statements <em>except</em> <code>from __future__</code> imports. Python mandates that future-imports must appear in the module before any other code except docstrings:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""This is the example module.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This module does stuff.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> barry_as_FLUFL</span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">__version__ = <span class="string">'0.1'</span></span><br><span class="line">__author__ = <span class="string">'Cardinal Biggles'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br></pre></td></tr></table></figure><h1 id="String-Quotes"><a href="#String-Quotes" class="headerlink" title="String Quotes"></a><a href="https://www.python.org/dev/peps/pep-0008/#id23" target="_blank" rel="noopener">String Quotes</a></h1><p>In Python, single-quoted strings and double-quoted strings are the same. This PEP does not make a recommendation for this. Pick a rule and stick to it. When a string contains single or double quote characters, however, use the other one to avoid backslashes in the string. It improves readability.</p><p>For triple-quoted strings, always use double quote characters to be consistent with the docstring convention in <a href="https://www.python.org/dev/peps/pep-0257" target="_blank" rel="noopener">PEP 257</a>.</p><h1 id="Whitespace-in-Expressions-and-Statements"><a href="#Whitespace-in-Expressions-and-Statements" class="headerlink" title="Whitespace in Expressions and Statements"></a><a href="https://www.python.org/dev/peps/pep-0008/#id24" target="_blank" rel="noopener">Whitespace in Expressions and Statements</a></h1><h2 id="Pet-Peeves"><a href="#Pet-Peeves" class="headerlink" title="Pet Peeves"></a><a href="https://www.python.org/dev/peps/pep-0008/#id25" target="_blank" rel="noopener">Pet Peeves</a></h2><p>Avoid extraneous whitespace in the following situations:</p><ul><li><p>Immediately inside parentheses, brackets or braces:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">Correct</span>:</span><br><span class="line"><span class="selector-tag">spam</span>(<span class="selector-tag">ham</span><span class="selector-attr">[1]</span>, &#123;<span class="attribute">eggs</span>: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">Wrong</span>:</span><br><span class="line"><span class="selector-tag">spam</span>( <span class="selector-tag">ham</span><span class="selector-attr">[ 1 ]</span>, &#123; <span class="attribute">eggs</span>: <span class="number">2</span> &#125; )</span><br></pre></td></tr></table></figure></li><li><p>Between a trailing comma and a following close parenthesis:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Correct:</span></span><br><span class="line"><span class="attr">foo</span> = (<span class="number">0</span>,)</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wrong:</span></span><br><span class="line"><span class="attr">bar</span> = (<span class="number">0</span>, )</span><br></pre></td></tr></table></figure></li><li><p>Immediately before a comma, semicolon, or colon:</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Correct:</span><br><span class="line"><span class="keywords">if</span> <span class="symbol">x</span> == <span class="number">4</span>: print <span class="symbol">x</span>, <span class="symbol">y</span>; <span class="symbol">x</span>, <span class="symbol">y</span> = <span class="symbol">y</span>, <span class="symbol">x</span></span><br></pre></td></tr></table></figure><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Wrong:</span><br><span class="line"><span class="keywords">if</span> <span class="symbol">x</span> == <span class="number">4</span> : print <span class="symbol">x</span> , <span class="symbol">y</span> ; <span class="symbol">x</span> , <span class="symbol">y</span> = <span class="symbol">y</span> , <span class="symbol">x</span></span><br></pre></td></tr></table></figure></li><li><p>However, in a slice the colon acts like a binary operator, and should have equal amounts on either side (treating it as the operator with the lowest priority). In an extended slice, both colons must have the same amount of spacing applied. Exception: when a slice parameter is omitted, the space is omitted:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Correct:</span></span><br><span class="line">ham[<span class="number">1</span>:<span class="number">9</span>], ham[<span class="number">1</span>:<span class="number">9</span>:<span class="number">3</span>], ham[:<span class="number">9</span>:<span class="number">3</span>], ham[<span class="number">1</span>::<span class="number">3</span>], ham[<span class="number">1</span>:<span class="number">9</span>:]</span><br><span class="line">ham[<span class="built_in">lower</span>:<span class="built_in">upper</span>], ham[<span class="built_in">lower</span>:<span class="built_in">upper</span>:], ham[<span class="built_in">lower</span>::step]</span><br><span class="line">ham[<span class="built_in">lower</span>+<span class="built_in">offset</span> : <span class="built_in">upper</span>+<span class="built_in">offset</span>]</span><br><span class="line">ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]</span><br><span class="line">ham[<span class="built_in">lower</span> + <span class="built_in">offset</span> : <span class="built_in">upper</span> + <span class="built_in">offset</span>]</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wrong:</span></span><br><span class="line">ham[<span class="built_in">lower</span> + <span class="built_in">offset</span>:<span class="built_in">upper</span> + <span class="built_in">offset</span>]</span><br><span class="line">ham[<span class="number">1</span>: <span class="number">9</span>], ham[<span class="number">1</span> :<span class="number">9</span>], ham[<span class="number">1</span>:<span class="number">9</span> :<span class="number">3</span>]</span><br><span class="line">ham[<span class="built_in">lower</span> : : <span class="built_in">upper</span>]</span><br><span class="line">ham[ : <span class="built_in">upper</span>]</span><br></pre></td></tr></table></figure></li><li><p>Immediately before the open parenthesis that starts the argument list of a function call:</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Correct:</span></span><br><span class="line">spam(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wrong:</span></span><br><span class="line"><span class="attribute">spam</span> (<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>Immediately before the open parenthesis that starts an indexing or slicing:</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Correct:</span></span><br><span class="line">dct[<span class="string">'key'</span>] = lst[<span class="keyword">index</span>]</span><br></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Wrong:</span></span><br><span class="line">dct [<span class="string">'key'</span>] = lst [<span class="keyword">index</span>]</span><br></pre></td></tr></table></figure></li><li><p>More than one space around an assignment (or other) operator to align it with another:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Correct:</span></span><br><span class="line"><span class="attr">x</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">y</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">long_variable</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wrong:</span></span><br><span class="line"><span class="attr">x</span>             = <span class="number">1</span></span><br><span class="line"><span class="attr">y</span>             = <span class="number">2</span></span><br><span class="line"><span class="attr">long_variable</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Other-Recommendations"><a href="#Other-Recommendations" class="headerlink" title="Other Recommendations"></a><a href="https://www.python.org/dev/peps/pep-0008/#id26" target="_blank" rel="noopener">Other Recommendations</a></h2><ul><li><p>Avoid trailing whitespace anywhere. Because it’s usually invisible, it can be confusing: e.g. a backslash followed by a space and a newline does not count as a line continuation marker. Some editors don’t preserve it and many projects (like CPython itself) have pre-commit hooks that reject it.</p></li><li><p>Always surround these binary operators with a single space on either side: assignment (<code>=</code>), augmented assignment (<code>+=</code>, <code>-=</code> etc.), comparisons (<code>==</code>, <code>&lt;</code>, <code>&gt;</code>, <code>!=</code>, <code>&lt;&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>in</code>, <code>not in</code>, <code>is</code>, <code>is not</code>), Booleans (<code>and</code>, <code>or</code>, <code>not</code>).</p></li><li><p>If operators with different priorities are used, consider adding whitespace around the operators with the lowest priority(ies). Use your own judgment; however, never use more than one space, and always have the same amount of whitespace on both sides of a binary operator:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Correct:</span></span><br><span class="line">i = i + 1</span><br><span class="line">submitted += 1</span><br><span class="line">x = x*2 - 1</span><br><span class="line">hypot2 = x*x + y*y</span><br><span class="line">c = (a+b) * (a-b)</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wrong:</span></span><br><span class="line">i=i+1</span><br><span class="line">submitted +=1</span><br><span class="line">x = x * 2 - 1</span><br><span class="line">hypot2 = x * x + y * y</span><br><span class="line">c = (a + b) * (a - b)</span><br></pre></td></tr></table></figure></li><li><p>Function annotations should use the normal rules for colons and always have spaces around the <code>-&gt;</code> arrow if present. (See <a href="https://www.python.org/dev/peps/pep-0008/#function-annotations" target="_blank" rel="noopener">Function Annotations</a> below for more about function annotations.):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Correct:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(input: AnyStr)</span>:</span> ...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">()</span> -&gt; PosInt:</span> ...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wrong:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(input:AnyStr)</span>:</span> ...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">()</span>-&gt;PosInt:</span> ...</span><br></pre></td></tr></table></figure></li><li><p>Don’t use spaces around the <code>=</code> sign when used to indicate a keyword argument, or when used to indicate a default value for an <em>unannotated</em> function parameter:</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Correct:</span></span><br><span class="line">def <span class="built_in">complex</span>(<span class="built_in">real</span>, <span class="built_in">imag</span>=<span class="number">0.0</span>):</span><br><span class="line">    <span class="keyword">return</span> magic(r=<span class="built_in">real</span>, i=<span class="built_in">imag</span>)</span><br></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Wrong:</span></span><br><span class="line">def <span class="built_in">complex</span>(<span class="built_in">real</span>, <span class="built_in">imag</span> = <span class="number">0.0</span>):</span><br><span class="line">    <span class="keyword">return</span> magic(r = <span class="built_in">real</span>, i = <span class="built_in">imag</span>)</span><br></pre></td></tr></table></figure><p>When combining an argument annotation with a default value, however, do use spaces around the <code>=</code> sign:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Correct:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(<span class="symbol">sep:</span> AnyStr = None)</span></span>: ...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(<span class="symbol">input:</span> AnyStr, <span class="symbol">sep:</span> AnyStr = None, limit=<span class="number">1000</span>)</span></span>: ...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wrong:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(<span class="symbol">input:</span> AnyStr=None)</span></span>: ...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(<span class="symbol">input:</span> AnyStr, limit = <span class="number">1000</span>)</span></span>: ...</span><br></pre></td></tr></table></figure></li><li><p>Compound statements (multiple statements on the same line) are generally discouraged:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Correct:</span><br><span class="line"><span class="keyword">if</span> foo<span class="operator"> == </span>'blah':</span><br><span class="line">    <span class="keyword">do</span><span class="constructor">_blah_thing()</span></span><br><span class="line"><span class="keyword">do</span><span class="constructor">_one()</span></span><br><span class="line"><span class="keyword">do</span><span class="constructor">_two()</span></span><br><span class="line"><span class="keyword">do</span><span class="constructor">_three()</span></span><br></pre></td></tr></table></figure><p>Rather not:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Wrong:</span><br><span class="line"><span class="keyword">if</span> foo<span class="operator"> == </span>'blah': <span class="keyword">do</span><span class="constructor">_blah_thing()</span></span><br><span class="line"><span class="keyword">do</span><span class="constructor">_one()</span>; <span class="keyword">do</span><span class="constructor">_two()</span>; <span class="keyword">do</span><span class="constructor">_three()</span></span><br></pre></td></tr></table></figure></li><li><p>While sometimes it’s okay to put an if/for/while with a small body on the same line, never do this for multi-clause statements. Also avoid folding such long lines!</p><p>Rather not:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Wron<span class="variable">g:</span></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>: do_blah_thing()</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">x</span> in <span class="keyword">ls</span><span class="variable">t:</span> total += <span class="keyword">x</span></span><br><span class="line"><span class="keyword">while</span> t &lt; <span class="number">10</span>: t = delay()</span><br></pre></td></tr></table></figure><p>Definitely not:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wrong:</span></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>: do_blah_thing()</span><br><span class="line"><span class="keyword">else</span>: do_non_blah_thing()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: something()</span><br><span class="line"><span class="keyword">finally</span>: cleanup()</span><br><span class="line"></span><br><span class="line">do_one(); do_two(); do_three(<span class="keyword">long</span>, argument,</span><br><span class="line">                             list, like, this)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>: <span class="literal">one</span>(); <span class="literal">two</span>(); <span class="literal">three</span>()</span><br></pre></td></tr></table></figure></li></ul><h1 id="When-to-Use-Trailing-Commas"><a href="#When-to-Use-Trailing-Commas" class="headerlink" title="When to Use Trailing Commas"></a><a href="https://www.python.org/dev/peps/pep-0008/#id27" target="_blank" rel="noopener">When to Use Trailing Commas</a></h1><p>Trailing commas are usually optional, except they are mandatory when making a tuple of one element. For clarity, it is recommended to surround the latter in (technically redundant) parentheses:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Correct:</span></span><br><span class="line"><span class="attr">FILES</span> = (<span class="string">'setup.cfg'</span>,)</span><br><span class="line"><span class="comment"># Wrong:</span></span><br><span class="line"><span class="attr">FILES</span> = <span class="string">'setup.cfg'</span>,</span><br></pre></td></tr></table></figure><p>When trailing commas are redundant, they are often helpful when a version control system is used, when a list of values, arguments or imported items is expected to be extended over time. The pattern is to put each value (etc.) on a line by itself, always adding a trailing comma, and add the close parenthesis/bracket/brace on the next line. However it does not make sense to have a trailing comma on the same line as the closing delimiter (except in the above case of singleton tuples):</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Correct:</span></span><br><span class="line"><span class="attribute">FILES</span> = [</span><br><span class="line">    <span class="string">'setup.cfg'</span>,</span><br><span class="line">    <span class="string">'tox.ini'</span>,</span><br><span class="line">    ]</span><br><span class="line">initialize(FILES,</span><br><span class="line">           <span class="literal">error</span>=True,</span><br><span class="line">           )</span><br><span class="line"><span class="comment"># Wrong:</span></span><br><span class="line">FILES = [<span class="string">'setup.cfg'</span>, <span class="string">'tox.ini'</span>,]</span><br><span class="line">initialize(FILES, <span class="literal">error</span>=True,)</span><br></pre></td></tr></table></figure><h1 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a><a href="https://www.python.org/dev/peps/pep-0008/#id28" target="_blank" rel="noopener">Comments</a></h1><p>Comments that contradict the code are worse than no comments. Always make a priority of keeping the comments up-to-date when the code changes!</p><p>Comments should be complete sentences. The first word should be capitalized, unless it is an identifier that begins with a lower case letter (never alter the case of identifiers!).</p><p>Block comments generally consist of one or more paragraphs built out of complete sentences, with each sentence ending in a period.</p><p>You should use two spaces after a sentence-ending period in multi- sentence comments, except after the final sentence.</p><p>Ensure that your comments are clear and easily understandable to other speakers of the language you are writing in.</p><p>Python coders from non-English speaking countries: please write your comments in English, unless you are 120% sure that the code will never be read by people who don’t speak your language.</p><h2 id="Block-Comments"><a href="#Block-Comments" class="headerlink" title="Block Comments"></a><a href="https://www.python.org/dev/peps/pep-0008/#id29" target="_blank" rel="noopener">Block Comments</a></h2><p>Block comments generally apply to some (or all) code that follows them, and are indented to the same level as that code. Each line of a block comment starts with a <code>#</code> and a single space (unless it is indented text inside the comment).</p><p>Paragraphs inside a block comment are separated by a line containing a single <code>#</code>.</p><h2 id="Inline-Comments"><a href="#Inline-Comments" class="headerlink" title="Inline Comments"></a><a href="https://www.python.org/dev/peps/pep-0008/#id30" target="_blank" rel="noopener">Inline Comments</a></h2><p>Use inline comments sparingly.</p><p>An inline comment is a comment on the same line as a statement. Inline comments should be separated by at least two spaces from the statement. They should start with a # and a single space.</p><p>Inline comments are unnecessary and in fact distracting if they state the obvious. Don’t do this:</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">x</span> = <span class="symbol">x</span> + <span class="number">1</span>                 # Increment <span class="symbol">x</span></span><br></pre></td></tr></table></figure><p>But sometimes, this is useful:</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">x</span> = <span class="symbol">x</span> + <span class="number">1</span>                 # Compensate <span class="keywords">for</span> border</span><br></pre></td></tr></table></figure><h2 id="Documentation-Strings"><a href="#Documentation-Strings" class="headerlink" title="Documentation Strings"></a><a href="https://www.python.org/dev/peps/pep-0008/#id31" target="_blank" rel="noopener">Documentation Strings</a></h2><p>Conventions for writing good documentation strings (a.k.a. “docstrings”) are immortalized in <a href="https://www.python.org/dev/peps/pep-0257" target="_blank" rel="noopener">PEP 257</a>.</p><ul><li><p>Write docstrings for all public modules, functions, classes, and methods. Docstrings are not necessary for non-public methods, but you should have a comment that describes what the method does. This comment should appear after the <code>def</code> line.</p></li><li><p><a href="https://www.python.org/dev/peps/pep-0257" target="_blank" rel="noopener">PEP 257</a> describes good docstring conventions. Note that most importantly, the <code>&quot;&quot;&quot;</code> that ends a multiline docstring should be on a line by itself:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""Return a foobang</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Optional plotz says to frobnicate the bizbaz first.</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></li><li><p>For one liner docstrings, please keep the closing <code>&quot;&quot;&quot;</code> on the same line:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""Return an ex-parrot."""</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Naming-Conventions"><a href="#Naming-Conventions" class="headerlink" title="Naming Conventions"></a><a href="https://www.python.org/dev/peps/pep-0008/#id32" target="_blank" rel="noopener">Naming Conventions</a></h1><p>The naming conventions of Python’s library are a bit of a mess, so we’ll never get this completely consistent – nevertheless, here are the currently recommended naming standards. New modules and packages (including third party frameworks) should be written to these standards, but where an existing library has a different style, internal consistency is preferred.</p><h2 id="Overriding-Principle"><a href="#Overriding-Principle" class="headerlink" title="Overriding Principle"></a><a href="https://www.python.org/dev/peps/pep-0008/#id33" target="_blank" rel="noopener">Overriding Principle</a></h2><p>Names that are visible to the user as public parts of the API should follow conventions that reflect usage rather than implementation.</p><h2 id="Descriptive-Naming-Styles"><a href="#Descriptive-Naming-Styles" class="headerlink" title="Descriptive: Naming Styles"></a><a href="https://www.python.org/dev/peps/pep-0008/#id34" target="_blank" rel="noopener">Descriptive: Naming Styles</a></h2><p>There are a lot of different naming styles. It helps to be able to recognize what naming style is being used, independently from what they are used for.</p><p>The following naming styles are commonly distinguished:</p><ul><li><p><code>b</code> (single lowercase letter)</p></li><li><p><code>B</code> (single uppercase letter)</p></li><li><p><code>lowercase</code></p></li><li><p><code>lower_case_with_underscores</code></p></li><li><p><code>UPPERCASE</code></p></li><li><p><code>UPPER_CASE_WITH_UNDERSCORES</code></p></li><li><p><code>CapitalizedWords</code> (or CapWords, or CamelCase – so named because of the bumpy look of its letters <a href="https://www.python.org/dev/peps/pep-0008/#id10" target="_blank" rel="noopener">[4]</a>). This is also sometimes known as StudlyCaps.</p><p>Note: When using acronyms in CapWords, capitalize all the letters of the acronym. Thus HTTPServerError is better than HttpServerError.</p></li><li><p><code>mixedCase</code> (differs from CapitalizedWords by initial lowercase character!)</p></li><li><p><code>Capitalized_Words_With_Underscores</code> (ugly!)</p></li></ul><p>There’s also the style of using a short unique prefix to group related names together. This is not used much in Python, but it is mentioned for completeness. For example, the <code>os.stat()</code> function returns a tuple whose items traditionally have names like <code>st_mode</code>, <code>st_size</code>, <code>st_mtime</code> and so on. (This is done to emphasize the correspondence with the fields of the POSIX system call struct, which helps programmers familiar with that.)</p><p>The X11 library uses a leading X for all its public functions. In Python, this style is generally deemed unnecessary because attribute and method names are prefixed with an object, and function names are prefixed with a module name.</p><p>In addition, the following special forms using leading or trailing underscores are recognized (these can generally be combined with any case convention):</p><ul><li><p><code>_single_leading_underscore</code>: weak “internal use” indicator. E.g. <code>from M import *</code> does not import objects whose names start with an underscore.</p></li><li><p><code>single_trailing_underscore_</code>: used by convention to avoid conflicts with Python keyword, e.g.</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tkinter.<span class="constructor">Toplevel(<span class="params">master</span>, <span class="params">class_</span>='ClassName')</span></span><br></pre></td></tr></table></figure></li><li><p><code>__double_leading_underscore</code>: when naming a class attribute, invokes name mangling (inside class FooBar, <code>__boo</code> becomes <code>_FooBar__boo</code>; see below).</p></li><li><p><code>__double_leading_and_trailing_underscore__</code>: “magic” objects or attributes that live in user-controlled namespaces. E.g. <code>__init__</code>, <code>__import__</code> or <code>__file__</code>. Never invent such names; only use them as documented.</p></li></ul><h2 id="Prescriptive-Naming-Conventions"><a href="#Prescriptive-Naming-Conventions" class="headerlink" title="Prescriptive: Naming Conventions"></a><a href="https://www.python.org/dev/peps/pep-0008/#id35" target="_blank" rel="noopener">Prescriptive: Naming Conventions</a></h2><h3 id="Names-to-Avoid"><a href="#Names-to-Avoid" class="headerlink" title="Names to Avoid"></a><a href="https://www.python.org/dev/peps/pep-0008/#id36" target="_blank" rel="noopener">Names to Avoid</a></h3><p>Never use the characters ‘l’ (lowercase letter el), ‘O’ (uppercase letter oh), or ‘I’ (uppercase letter eye) as single character variable names.</p><p>In some fonts, these characters are indistinguishable from the numerals one and zero. When tempted to use ‘l’, use ‘L’ instead.</p><h3 id="ASCII-Compatibility"><a href="#ASCII-Compatibility" class="headerlink" title="ASCII Compatibility"></a><a href="https://www.python.org/dev/peps/pep-0008/#id37" target="_blank" rel="noopener">ASCII Compatibility</a></h3><p>Identifiers used in the standard library must be ASCII compatible as described in the <a href="https://www.python.org/dev/peps/pep-3131/#policy-specification" target="_blank" rel="noopener">policy section</a> of <a href="https://www.python.org/dev/peps/pep-3131" target="_blank" rel="noopener">PEP 3131</a>.</p><h3 id="Package-and-Module-Names"><a href="#Package-and-Module-Names" class="headerlink" title="Package and Module Names"></a><a href="https://www.python.org/dev/peps/pep-0008/#id38" target="_blank" rel="noopener">Package and Module Names</a></h3><p>Modules should have short, all-lowercase names. Underscores can be used in the module name if it improves readability. Python packages should also have short, all-lowercase names, although the use of underscores is discouraged.</p><p>When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e.g. more object oriented) interface, the C/C++ module has a leading underscore (e.g. <code>_socket</code>).</p><h3 id="Class-Names"><a href="#Class-Names" class="headerlink" title="Class Names"></a><a href="https://www.python.org/dev/peps/pep-0008/#id39" target="_blank" rel="noopener">Class Names</a></h3><p>Class names should normally use the CapWords convention.</p><p>The naming convention for functions may be used instead in cases where the interface is documented and used primarily as a callable.</p><p>Note that there is a separate convention for builtin names: most builtin names are single words (or two words run together), with the CapWords convention used only for exception names and builtin constants.</p><h3 id="Type-Variable-Names"><a href="#Type-Variable-Names" class="headerlink" title="Type Variable Names"></a><a href="https://www.python.org/dev/peps/pep-0008/#id40" target="_blank" rel="noopener">Type Variable Names</a></h3><p>Names of type variables introduced in <a href="https://www.python.org/dev/peps/pep-0484" target="_blank" rel="noopener">PEP 484</a> should normally use CapWords preferring short names: <code>T</code>, <code>AnyStr</code>, <code>Num</code>. It is recommended to add suffixes <code>_co</code> or <code>_contra</code> to the variables used to declare covariant or contravariant behavior correspondingly:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar</span><br><span class="line"></span><br><span class="line">VT_co = TypeVar(<span class="string">'VT_co'</span>, covariant=<span class="literal">True</span>)</span><br><span class="line">KT_contra = TypeVar(<span class="string">'KT_contra'</span>, contravariant=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Exception-Names"><a href="#Exception-Names" class="headerlink" title="Exception Names"></a><a href="https://www.python.org/dev/peps/pep-0008/#id41" target="_blank" rel="noopener">Exception Names</a></h3><p>Because exceptions should be classes, the class naming convention applies here. However, you should use the suffix “Error” on your exception names (if the exception actually is an error).</p><h3 id="Global-Variable-Names"><a href="#Global-Variable-Names" class="headerlink" title="Global Variable Names"></a><a href="https://www.python.org/dev/peps/pep-0008/#id42" target="_blank" rel="noopener">Global Variable Names</a></h3><p>(Let’s hope that these variables are meant for use inside one module only.) The conventions are about the same as those for functions.</p><p>Modules that are designed for use via <code>from M import *</code> should use the <code>__all__</code> mechanism to prevent exporting globals, or use the older convention of prefixing such globals with an underscore (which you might want to do to indicate these globals are “module non-public”).</p><h3 id="Function-and-Variable-Names"><a href="#Function-and-Variable-Names" class="headerlink" title="Function and Variable Names"></a><a href="https://www.python.org/dev/peps/pep-0008/#id43" target="_blank" rel="noopener">Function and Variable Names</a></h3><p>Function names should be lowercase, with words separated by underscores as necessary to improve readability.</p><p>Variable names follow the same convention as function names.</p><p>mixedCase is allowed only in contexts where that’s already the prevailing style (e.g. threading.py), to retain backwards compatibility.</p><h3 id="Function-and-Method-Arguments"><a href="#Function-and-Method-Arguments" class="headerlink" title="Function and Method Arguments"></a><a href="https://www.python.org/dev/peps/pep-0008/#id44" target="_blank" rel="noopener">Function and Method Arguments</a></h3><p>Always use <code>self</code> for the first argument to instance methods.</p><p>Always use <code>cls</code> for the first argument to class methods.</p><p>If a function argument’s name clashes with a reserved keyword, it is generally better to append a single trailing underscore rather than use an abbreviation or spelling corruption. Thus <code>class_</code> is better than <code>clss</code>. (Perhaps better is to avoid such clashes by using a synonym.)</p><h3 id="Method-Names-and-Instance-Variables"><a href="#Method-Names-and-Instance-Variables" class="headerlink" title="Method Names and Instance Variables"></a><a href="https://www.python.org/dev/peps/pep-0008/#id45" target="_blank" rel="noopener">Method Names and Instance Variables</a></h3><p>Use the function naming rules: lowercase with words separated by underscores as necessary to improve readability.</p><p>Use one leading underscore only for non-public methods and instance variables.</p><p>To avoid name clashes with subclasses, use two leading underscores to invoke Python’s name mangling rules.</p><p>Python mangles these names with the class name: if class Foo has an attribute named <code>__a</code>, it cannot be accessed by <code>Foo.__a</code>. (An insistent user could still gain access by calling <code>Foo._Foo__a</code>.) Generally, double leading underscores should be used only to avoid name conflicts with attributes in classes designed to be subclassed.</p><p>Note: there is some controversy about the use of __names (see below).</p><h3 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a><a href="https://www.python.org/dev/peps/pep-0008/#id46" target="_blank" rel="noopener">Constants</a></h3><p>Constants are usually defined on a module level and written in all capital letters with underscores separating words. Examples include <code>MAX_OVERFLOW</code> and <code>TOTAL</code>.</p><h3 id="Designing-for-Inheritance"><a href="#Designing-for-Inheritance" class="headerlink" title="Designing for Inheritance"></a><a href="https://www.python.org/dev/peps/pep-0008/#id47" target="_blank" rel="noopener">Designing for Inheritance</a></h3><p>Always decide whether a class’s methods and instance variables (collectively: “attributes”) should be public or non-public. If in doubt, choose non-public; it’s easier to make it public later than to make a public attribute non-public.</p><p>Public attributes are those that you expect unrelated clients of your class to use, with your commitment to avoid backwards incompatible changes. Non-public attributes are those that are not intended to be used by third parties; you make no guarantees that non-public attributes won’t change or even be removed.</p><p>We don’t use the term “private” here, since no attribute is really private in Python (without a generally unnecessary amount of work).</p><p>Another category of attributes are those that are part of the “subclass API” (often called “protected” in other languages). Some classes are designed to be inherited from, either to extend or modify aspects of the class’s behavior. When designing such a class, take care to make explicit decisions about which attributes are public, which are part of the subclass API, and which are truly only to be used by your base class.</p><p>With this in mind, here are the Pythonic guidelines:</p><ul><li><p>Public attributes should have no leading underscores.</p></li><li><p>If your public attribute name collides with a reserved keyword, append a single trailing underscore to your attribute name. This is preferable to an abbreviation or corrupted spelling. (However, notwithstanding this rule, ‘cls’ is the preferred spelling for any variable or argument which is known to be a class, especially the first argument to a class method.)</p><p>Note 1: See the argument name recommendation above for class methods.</p></li><li><p>For simple public data attributes, it is best to expose just the attribute name, without complicated accessor/mutator methods. Keep in mind that Python provides an easy path to future enhancement, should you find that a simple data attribute needs to grow functional behavior. In that case, use properties to hide functional implementation behind simple data attribute access syntax.</p><p>Note 1: Try to keep the functional behavior side-effect free, although side-effects such as caching are generally fine.</p><p>Note 2: Avoid using properties for computationally expensive operations; the attribute notation makes the caller believe that access is (relatively) cheap.</p></li><li><p>If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with double leading underscores and no trailing underscores. This invokes Python’s name mangling algorithm, where the name of the class is mangled into the attribute name. This helps avoid attribute name collisions should subclasses inadvertently contain attributes with the same name.</p><p>Note 1: Note that only the simple class name is used in the mangled name, so if a subclass chooses both the same class name and attribute name, you can still get name collisions.</p><p>Note 2: Name mangling can make certain uses, such as debugging and <code>__getattr__()</code>, less convenient. However the name mangling algorithm is well documented and easy to perform manually.</p><p>Note 3: Not everyone likes name mangling. Try to balance the need to avoid accidental name clashes with potential use by advanced callers.</p></li></ul><h2 id="Public-and-Internal-Interfaces"><a href="#Public-and-Internal-Interfaces" class="headerlink" title="Public and Internal Interfaces"></a><a href="https://www.python.org/dev/peps/pep-0008/#id48" target="_blank" rel="noopener">Public and Internal Interfaces</a></h2><p>Any backwards compatibility guarantees apply only to public interfaces. Accordingly, it is important that users be able to clearly distinguish between public and internal interfaces.</p><p>Documented interfaces are considered public, unless the documentation explicitly declares them to be provisional or internal interfaces exempt from the usual backwards compatibility guarantees. All undocumented interfaces should be assumed to be internal.</p><p>To better support introspection, modules should explicitly declare the names in their public API using the <code>__all__</code> attribute. Setting <code>__all__</code> to an empty list indicates that the module has no public API.</p><p>Even with <code>__all__</code> set appropriately, internal interfaces (packages, modules, classes, functions, attributes or other names) should still be prefixed with a single leading underscore.</p><p>An interface is also considered internal if any containing namespace (package, module or class) is considered internal.</p><p>Imported names should always be considered an implementation detail. Other modules must not rely on indirect access to such imported names unless they are an explicitly documented part of the containing module’s API, such as <code>os.path</code> or a package’s <code>__init__</code> module that exposes functionality from submodules.</p><h1 id="Programming-Recommendations"><a href="#Programming-Recommendations" class="headerlink" title="Programming Recommendations"></a><a href="https://www.python.org/dev/peps/pep-0008/#id49" target="_blank" rel="noopener">Programming Recommendations</a></h1><ul><li><p>Code should be written in a way that does not disadvantage other implementations of Python (PyPy, Jython, IronPython, Cython, Psyco, and such).</p><p>For example, do not rely on CPython’s efficient implementation of in-place string concatenation for statements in the form <code>a += b</code> or <code>a = a + b</code>. This optimization is fragile even in CPython (it only works for some types) and isn’t present at all in implementations that don’t use refcounting. In performance sensitive parts of the library, the <code>&#39;&#39;.join()</code> form should be used instead. This will ensure that concatenation occurs in linear time across various implementations.</p></li><li><p>Comparisons to singletons like None should always be done with <code>is</code> or <code>is not</code>, never the equality operators.</p><p>Also, beware of writing <code>if x</code> when you really mean <code>if x is not None</code> – e.g. when testing whether a variable or argument that defaults to None was set to some other value. The other value might have a type (such as a container) that could be false in a boolean context!</p></li><li><p>Use <code>is not</code> operator rather than <code>not ... is</code>. While both expressions are functionally identical, the former is more readable and preferred:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Correct:</span></span><br><span class="line"><span class="keyword">if</span> foo <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wrong:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> foo <span class="keyword">is</span> <span class="keyword">None</span>:</span><br></pre></td></tr></table></figure></li><li><p>When implementing ordering operations with rich comparisons, it is best to implement all six operations (<code>__eq__</code>, <code>__ne__</code>, <code>__lt__</code>, <code>__le__</code>, <code>__gt__</code>, <code>__ge__</code>) rather than relying on other code to only exercise a particular comparison.</p><p>To minimize the effort involved, the <code>functools.total_ordering()</code> decorator provides a tool to generate missing comparison methods.</p><p><a href="https://www.python.org/dev/peps/pep-0207" target="_blank" rel="noopener">PEP 207</a> indicates that reflexivity rules <em>are</em> assumed by Python. Thus, the interpreter may swap <code>y &gt; x</code> with <code>x &lt; y</code>, <code>y &gt;= x</code> with <code>x &lt;= y</code>, and may swap the arguments of <code>x == y</code> and <code>x != y</code>. The <code>sort()</code> and <code>min()</code> operations are guaranteed to use the <code>&lt;</code> operator and the <code>max()</code> function uses the <code>&gt;</code> operator. However, it is best to implement all six operations so that confusion doesn’t arise in other contexts.</p></li><li><p>Always use a def statement instead of an assignment statement that binds a lambda expression directly to an identifier:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Correct:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span></span>: <span class="keyword">return</span> <span class="number">2</span>*x</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wrong:</span></span><br><span class="line"><span class="attr">f</span> = lambda x: <span class="number">2</span>*x</span><br></pre></td></tr></table></figure><p>The first form means that the name of the resulting function object is specifically ‘f’ instead of the generic ‘<lambda>‘. This is more useful for tracebacks and string representations in general. The use of the assignment statement eliminates the sole benefit a lambda expression can offer over an explicit def statement (i.e. that it can be embedded inside a larger expression)</lambda></p></li><li><p>Derive exceptions from <code>Exception</code> rather than <code>BaseException</code>. Direct inheritance from <code>BaseException</code> is reserved for exceptions where catching them is almost always the wrong thing to do.</p><p>Design exception hierarchies based on the distinctions that code <em>catching</em> the exceptions is likely to need, rather than the locations where the exceptions are raised. Aim to answer the question “What went wrong?” programmatically, rather than only stating that “A problem occurred” (see <a href="https://www.python.org/dev/peps/pep-3151" target="_blank" rel="noopener">PEP 3151</a> for an example of this lesson being learned for the builtin exception hierarchy)</p><p>Class naming conventions apply here, although you should add the suffix “Error” to your exception classes if the exception is an error. Non-error exceptions that are used for non-local flow control or other forms of signaling need no special suffix.</p></li><li><p>Use exception chaining appropriately. <code>raise X from Y</code> should be used to indicate explicit replacement without losing the original traceback.</p><p>When deliberately replacing an inner exception (using <code>raise X from None</code>), ensure that relevant details are transferred to the new exception (such as preserving the attribute name when converting KeyError to AttributeError, or embedding the text of the original exception in the new exception message).</p></li><li><p>When catching exceptions, mention specific exceptions whenever possible instead of using a bare <code>except:</code> clause:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">try</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">import</span> <span class="string">platform_specific_module</span></span><br><span class="line"><span class="attr">except</span> <span class="string">ImportError:</span></span><br><span class="line">    <span class="attr">platform_specific_module</span> = <span class="string">None</span></span><br></pre></td></tr></table></figure><p>A bare <code>except:</code> clause will catch SystemExit and KeyboardInterrupt exceptions, making it harder to interrupt a program with Control-C, and can disguise other problems. If you want to catch all exceptions that signal program errors, use <code>except Exception:</code> (bare except is equivalent to <code>except BaseException:</code>).</p><p>A good rule of thumb is to limit use of bare ‘except’ clauses to two cases:</p><ol><li>If the exception handler will be printing out or logging the traceback; at least the user will be aware that an error has occurred.</li><li>If the code needs to do some cleanup work, but then lets the exception propagate upwards with <code>raise</code>. <code>try...finally</code> can be a better way to handle this case.</li></ol></li><li><p>When catching operating system errors, prefer the explicit exception hierarchy introduced in Python 3.3 over introspection of <code>errno</code> values.</p></li><li><p>Additionally, for all try/except clauses, limit the <code>try</code> clause to the absolute minimum amount of code necessary. Again, this avoids masking bugs:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Correct:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">value</span> = collection[key]</span><br><span class="line">except KeyError:</span><br><span class="line">    <span class="keyword">return</span> key_not_found(key)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> handle_value(<span class="keyword">value</span>)</span><br></pre></td></tr></table></figure><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Wrong:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="meta"># Too broad!</span></span><br><span class="line">    <span class="keyword">return</span> handle_value(collection[<span class="keyword">key</span>])</span><br><span class="line">except KeyError:</span><br><span class="line">    <span class="meta"># Will also catch KeyError raised by handle_value()</span></span><br><span class="line">    <span class="keyword">return</span> key_not_found(<span class="keyword">key</span>)</span><br></pre></td></tr></table></figure></li><li><p>When a resource is local to a particular section of code, use a <code>with</code> statement to ensure it is cleaned up promptly and reliably after use. A try/finally statement is also acceptable.</p></li><li><p>Context managers should be invoked through separate functions or methods whenever they do something other than acquire and release resources:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Correct:</span><br><span class="line"><span class="keyword">with</span> conn.<span class="keyword">begin</span><span class="constructor">_transaction()</span>:</span><br><span class="line">    <span class="keyword">do</span><span class="constructor">_stuff_in_transaction(<span class="params">conn</span>)</span></span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Wrong:</span><br><span class="line"><span class="keyword">with</span> conn:</span><br><span class="line">    <span class="keyword">do</span><span class="constructor">_stuff_in_transaction(<span class="params">conn</span>)</span></span><br></pre></td></tr></table></figure><p>The latter example doesn’t provide any information to indicate that the <code>__enter__</code> and <code>__exit__</code> methods are doing something other than closing the connection after a transaction. Being explicit is important in this case.</p></li><li><p>Be consistent in return statements. Either all return statements in a function should return an expression, or none of them should. If any return statement returns an expression, any return statements where no value is returned should explicitly state this as <code>return None</code>, and an explicit return statement should be present at the end of the function (if reachable):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Correct:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> math.sqrt(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> math.sqrt(x)</span><br></pre></td></tr></table></figure><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Wrong:</span><br><span class="line"></span><br><span class="line">def foo(<span class="symbol">x</span>):</span><br><span class="line">    <span class="keywords">if</span> <span class="symbol">x</span> &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keywords">return</span> math.<span class="built_in">sqrt</span>(<span class="symbol">x</span>)</span><br><span class="line"></span><br><span class="line">def bar(<span class="symbol">x</span>):</span><br><span class="line">    <span class="keywords">if</span> <span class="symbol">x</span> &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keywords">return</span></span><br><span class="line">    <span class="keywords">return</span> math.<span class="built_in">sqrt</span>(<span class="symbol">x</span>)</span><br></pre></td></tr></table></figure></li><li><p>Use <code>&#39;&#39;.startswith()</code> and <code>&#39;&#39;.endswith()</code> instead of string slicing to check for prefixes or suffixes.</p><p>startswith() and endswith() are cleaner and less error prone:</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Correct:</span></span><br><span class="line"><span class="keyword">if</span> foo.startswith(<span class="string">'bar'</span>):</span><br></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Wrong:</span></span><br><span class="line"><span class="keyword">if</span> foo[:<span class="number">3</span>] == <span class="string">'bar'</span>:</span><br></pre></td></tr></table></figure></li><li><p>Object type comparisons should always use isinstance() instead of comparing types directly:</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Correct:</span></span><br><span class="line"><span class="keyword">if</span> isinstance(obj, <span class="keyword">int</span>):</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Wrong:</span></span><br><span class="line"><span class="title">if</span> <span class="class"><span class="keyword">type</span>(<span class="title">obj</span>) is <span class="keyword">type</span>(1):</span></span><br></pre></td></tr></table></figure></li><li><p>For sequences, (strings, lists, tuples), use the fact that empty sequences are false:</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Correct:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">seq</span>:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">seq</span>:</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wrong:</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(seq):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">len</span>(seq):</span><br></pre></td></tr></table></figure></li><li><p>Don’t write string literals that rely on significant trailing whitespace. Such trailing whitespace is visually indistinguishable and some editors (or more recently, reindent.py) will trim them.</p></li><li><p>Don’t compare boolean values to True or False using <code>==</code>:</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Correct:</span></span><br><span class="line"><span class="keyword">if</span> greeting:</span><br></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Wrong:</span></span><br><span class="line"><span class="keyword">if</span> greeting == <span class="literal">True</span>:</span><br></pre></td></tr></table></figure><p>Worse:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wrong:</span></span><br><span class="line"><span class="keyword">if</span> greeting <span class="keyword">is</span> <span class="keyword">True</span>:</span><br></pre></td></tr></table></figure></li><li><p>Use of the flow control statements <code>return</code>/<code>break</code>/<code>continue</code> within the finally suite of a <code>try...finally</code>, where the flow control statement would jump outside the finally suite, is discouraged. This is because such statements will implicitly cancel any active exception that is propagating through the finally suite:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wrong:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="number">1</span> / <span class="number">0</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">42</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Function-Annotations"><a href="#Function-Annotations" class="headerlink" title="Function Annotations"></a><a href="https://www.python.org/dev/peps/pep-0008/#id50" target="_blank" rel="noopener">Function Annotations</a></h2><p>With the acceptance of <a href="https://www.python.org/dev/peps/pep-0484" target="_blank" rel="noopener">PEP 484</a>, the style rules for function annotations have changed.</p><ul><li><p>Function annotations should use <a href="https://www.python.org/dev/peps/pep-0484" target="_blank" rel="noopener">PEP 484</a> syntax (There are some formatting recommendations for annotations in the previous section).</p></li><li><p>The experimentation with annotation styles that was recommended previously in this PEP is no longer encouraged.</p></li><li><p>However, outside the stdlib, experiments within the rules of <a href="https://www.python.org/dev/peps/pep-0484" target="_blank" rel="noopener">PEP 484</a> are now encouraged. For example, marking up a large third party library or application with <a href="https://www.python.org/dev/peps/pep-0484" target="_blank" rel="noopener">PEP 484</a> style type annotations, reviewing how easy it was to add those annotations, and observing whether their presence increases code understandability.</p></li><li><p>The Python standard library should be conservative in adopting such annotations, but their use is allowed for new code and for big refactorings.</p></li><li><p>For code that wants to make a different use of function annotations it is recommended to put a comment of the form:</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">type</span>: ignore</span><br></pre></td></tr></table></figure><p>near the top of the file; this tells type checkers to ignore all annotations. (More fine-grained ways of disabling complaints from type checkers can be found in <a href="https://www.python.org/dev/peps/pep-0484" target="_blank" rel="noopener">PEP 484</a>.)</p></li><li><p>Like linters, type checkers are optional, separate tools. Python interpreters by default should not issue any messages due to type checking and should not alter their behavior based on annotations.</p></li><li><p>Users who don’t want to use type checkers are free to ignore them. However, it is expected that users of third party library packages may want to run type checkers over those packages. For this purpose <a href="https://www.python.org/dev/peps/pep-0484" target="_blank" rel="noopener">PEP 484</a> recommends the use of stub files: .pyi files that are read by the type checker in preference of the corresponding .py files. Stub files can be distributed with a library, or separately (with the library author’s permission) through the typeshed repo <a href="https://www.python.org/dev/peps/pep-0008/#id11" target="_blank" rel="noopener">[5]</a>.</p></li></ul><h2 id="Variable-Annotations"><a href="#Variable-Annotations" class="headerlink" title="Variable Annotations"></a><a href="https://www.python.org/dev/peps/pep-0008/#id51" target="_blank" rel="noopener">Variable Annotations</a></h2><p><a href="https://www.python.org/dev/peps/pep-0526" target="_blank" rel="noopener">PEP 526</a> introduced variable annotations. The style recommendations for them are similar to those on function annotations described above:</p><ul><li><p>Annotations for module level variables, class and instance variables, and local variables should have a single space after the colon.</p></li><li><p>There should be no space before the colon.</p></li><li><p>If an assignment has a right hand side, then the equality sign should have exactly one space on both sides:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Correct:</span><br><span class="line"></span><br><span class="line">code: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Point:</span></span><br><span class="line">    <span class="symbol">coords: <span class="symbol">Tuple</span></span>[<span class="symbol">int, <span class="symbol">int</span></span>]</span><br><span class="line">    <span class="symbol">label: <span class="symbol">str</span></span> = '&lt;<span class="symbol">unknown</span>&gt;'</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Wrong:</span><br><span class="line"></span><br><span class="line">code:<span class="built_in">int</span>  # No space after colon</span><br><span class="line">code : <span class="built_in">int</span>  # Space before colon</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Test:</span></span><br><span class="line">    <span class="symbol">result: <span class="symbol">int</span></span>=<span class="symbol">0</span>  # <span class="symbol">No</span> <span class="symbol">spaces</span> <span class="symbol">around</span> <span class="symbol">equality</span> <span class="symbol">sign</span></span><br></pre></td></tr></table></figure></li><li><p>Although the <a href="https://www.python.org/dev/peps/pep-0526" target="_blank" rel="noopener">PEP 526</a> is accepted for Python 3.6, the variable annotation syntax is the preferred syntax for stub files on all versions of Python (see <a href="https://www.python.org/dev/peps/pep-0484" target="_blank" rel="noopener">PEP 484</a> for details).</p></li></ul><p>Footnotes</p><table><thead><tr><th><a href="https://www.python.org/dev/peps/pep-0008/#id3" target="_blank" rel="noopener">[6]</a></th><th><em>Hanging indentation</em> is a type-setting style where all the lines in a paragraph are indented except the first line. In the context of Python, the term is used to describe a style where the opening parenthesis of a parenthesized statement is the last non-whitespace character of the line, with subsequent lines being indented until the closing parenthesis.</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><a href="https://www.python.org/dev/peps/pep-0008/#id52" target="_blank" rel="noopener">参考文献</a></h1><table><thead><tr><th><a href="https://www.python.org/dev/peps/pep-0008/#id1" target="_blank" rel="noopener">[1]</a></th><th><a href="https://www.python.org/dev/peps/pep-0007" target="_blank" rel="noopener">PEP 7</a>, Style Guide for C Code, van Rossum</th></tr></thead><tbody><tr><td></td></tr></tbody></table><table><thead><tr><th><a href="https://www.python.org/dev/peps/pep-0008/#id2" target="_blank" rel="noopener">[2]</a></th><th>Barry’s GNU Mailman style guide <a href="http://barry.warsaw.us/software/STYLEGUIDE.txt" target="_blank" rel="noopener">http://barry.warsaw.us/software/STYLEGUIDE.txt</a></th></tr></thead><tbody><tr><td></td></tr></tbody></table><table><thead><tr><th><a href="https://www.python.org/dev/peps/pep-0008/#id4" target="_blank" rel="noopener">[3]</a></th><th>Donald Knuth’s <em>The TeXBook</em>, pages 195 and 196.</th></tr></thead><tbody><tr><td></td></tr></tbody></table><table><thead><tr><th><a href="https://www.python.org/dev/peps/pep-0008/#id5" target="_blank" rel="noopener">[4]</a></th><th><a href="http://www.wikipedia.com/wiki/CamelCase" target="_blank" rel="noopener">http://www.wikipedia.com/wiki/CamelCase</a></th></tr></thead><tbody><tr><td></td></tr></tbody></table><table><thead><tr><th><a href="https://www.python.org/dev/peps/pep-0008/#id6" target="_blank" rel="noopener">[5]</a></th><th>Typeshed repo <a href="https://github.com/python/typeshed" target="_blank" rel="noopener">https://github.com/python/typeshed</a></th></tr></thead><tbody><tr><td></td></tr></tbody></table><h1 id="Copyright"><a href="#Copyright" class="headerlink" title="Copyright"></a><a href="https://www.python.org/dev/peps/pep-0008/#id53" target="_blank" rel="noopener">Copyright</a></h1><p>This document has been placed in the public domain.</p><p>Source: <a href="https://github.com/python/peps/blob/master/pep-0008.txt" target="_blank" rel="noopener">https://github.com/python/peps/blob/master/pep-0008.txt</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分 基础环境准备&lt;/li&gt;
&lt;li&gt;第二部分 开发环境项目部署&lt;/li&gt;
&lt;li&gt;第三部分 生产部
      
    
    </summary>
    
      <category term="Spring" scheme="https://zjrongxiang.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Hadoop Yarn高可用机制</title>
    <link href="https://zjrongxiang.github.io/2021/11/16/2022-01-18-Hadoop%20Yarn%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9C%BA%E5%88%B6/"/>
    <id>https://zjrongxiang.github.io/2021/11/16/2022-01-18-Hadoop Yarn高可用机制/</id>
    <published>2021-11-16T05:30:00.000Z</published>
    <updated>2022-01-18T10:33:26.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>背景</li><li>第一部分 Spark内存管理详解</li><li>第二部分 Spark参数说明</li><li>第三部分 Spark内存优化</li><li>第四部分 常见线上问题解决</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>ResourceManager High Availability</p><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;description&gt;When HA is enabled, the class to be used by Clients, AMs and</span><br><span class="line">      NMs to failover to the Active RM. It should extend</span><br><span class="line">      org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.yarn</span><span class="selector-class">.client</span><span class="selector-class">.RMFailoverProxyProvider</span>&lt;/description&gt;</span><br><span class="line">    &lt;name&gt;yarn<span class="selector-class">.client</span><span class="selector-class">.failover-proxy-provider</span>&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.yarn</span><span class="selector-class">.client</span><span class="selector-class">.ConfiguredRMFailoverProxyProvider</span>&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs<span class="selector-class">.client</span><span class="selector-class">.failover</span><span class="selector-class">.proxy</span><span class="selector-class">.provider</span><span class="selector-class">.ns</span>&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hdfs</span><span class="selector-class">.server</span><span class="selector-class">.namenode</span><span class="selector-class">.ha</span><span class="selector-class">.ConfiguredFailoverProxyProvider</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p><a href="https://jxy.me/2015/04/09/hadoop-ha-active-nn/" target="_blank" rel="noopener">https://jxy.me/2015/04/09/hadoop-ha-active-nn/</a></p><h2 id="参考文献及资料"><a href="#参考文献及资料" class="headerlink" title="参考文献及资料"></a>参考文献及资料</h2><p>1、<code>RuoYi-Cloud</code>项目文档，链接：<a href="https://blog.csdn.net/ifenggege/article/details/107968518" target="_blank" rel="noopener">https://blog.csdn.net/ifenggege/article/details/107968518</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分 Spark内存管理详解&lt;/li&gt;
&lt;li&gt;第二部分 Spark参数说明&lt;/li&gt;
&lt;li&gt;第三
      
    
    </summary>
    
      <category term="Spring" scheme="https://zjrongxiang.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spark对外内存实践</title>
    <link href="https://zjrongxiang.github.io/2021/11/16/2022-01-15-Spark%E5%AF%B9%E5%A4%96%E5%86%85%E5%AD%98%E5%AE%9E%E8%B7%B5/"/>
    <id>https://zjrongxiang.github.io/2021/11/16/2022-01-15-Spark对外内存实践/</id>
    <published>2021-11-16T05:30:00.000Z</published>
    <updated>2022-01-15T02:02:53.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>背景</li><li>第一部分 Spark内存管理详解</li><li>第二部分 Spark参数说明</li><li>第三部分 Spark内存优化</li><li>第四部分 常见线上问题解决</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><p><a href="https://www.waitingforcode.com/apache-spark/apache-spark-off-heap-memory/read" target="_blank" rel="noopener">https://www.waitingforcode.com/apache-spark/apache-spark-off-heap-memory/read</a></p><h2 id="参考文献及资料"><a href="#参考文献及资料" class="headerlink" title="参考文献及资料"></a>参考文献及资料</h2><p>1、<code>RuoYi-Cloud</code>项目文档，链接：<a href="https://blog.csdn.net/ifenggege/article/details/107968518" target="_blank" rel="noopener">https://blog.csdn.net/ifenggege/article/details/107968518</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分 Spark内存管理详解&lt;/li&gt;
&lt;li&gt;第二部分 Spark参数说明&lt;/li&gt;
&lt;li&gt;第三
      
    
    </summary>
    
      <category term="Spring" scheme="https://zjrongxiang.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>基于PyFlink实现在线机器学习</title>
    <link href="https://zjrongxiang.github.io/2021/11/16/2022-01-15-%E5%9F%BA%E4%BA%8EPyFlink%E5%AE%9E%E7%8E%B0%E5%9C%A8%E7%BA%BF%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>https://zjrongxiang.github.io/2021/11/16/2022-01-15-基于PyFlink实现在线机器学习/</id>
    <published>2021-11-16T05:30:00.000Z</published>
    <updated>2022-01-20T00:25:43.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>背景</li><li>第一部分 环境准备</li><li>第二部分 原理解析</li><li>第三部分 案例运行</li><li>第四部分 线上架构设计</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>目前Flink逐步成为企业级大数据平台的使用最广泛的实时计算框架，特别在构建TB级别的实时数仓场景。Flink经历大量企业级线上环境的业务考验。</p><p>那么Flink的强大实时计算能力能否赋能给机器学习场景呢？这就是PyFlink项目的目的。我们知道机器学习主要是基于Python语言生态圈。但是Python（Cpython）语言是一个单核语言（即全局解析锁GIL），限制了单机处理性能。但是有了Flink赋能，Python机器学习可以分布式实时处理，就能大大提升机器学习的处理能力。</p><p>本文将介绍PyFlink项目的实现原理、环境部署、机器学习案例运行，最后对实际线上架构部署提出架构建议。</p><h2 id="第一部分-环境准备"><a href="#第一部分-环境准备" class="headerlink" title="第一部分 环境准备"></a>第一部分 环境准备</h2><h3 id="1-1-Hadoop-Yarn集群准备"><a href="#1-1-Hadoop-Yarn集群准备" class="headerlink" title="1.1 Hadoop Yarn集群准备"></a>1.1 Hadoop Yarn集群准备</h3><p>测试环境我们使用CDH开源集群，Flink的运行方式采用Flink on Yarn模式。单机测试的时候还有下面几种模式：</p><ul><li>Local-SingleJVM 模式，开发测试使用，所有角色TM、JM 都在同一个 JVM 里面，线程模拟；</li><li>Local-SingleNode 模式，开发测试使用，运行在单机，进程模拟，伪分布式。</li><li>Cluster 模式，Flink自带集群模式，即Standalone集群；</li><li>k8s模式，k8s云模式部署；</li></ul><h3 id="1-1-Flink准备"><a href="#1-1-Flink准备" class="headerlink" title="1.1 Flink准备"></a>1.1 Flink准备</h3><p>Flink 版本采用最新（2022年1月15日）稳定版：<a href="https://www.apache.org/dyn/closer.lua/flink/flink-1.14.2/flink-1.14.2-bin-scala_2.11.tgz" target="_blank" rel="noopener">Apache Flink 1.14.2</a>。</p><h3 id="1-2-Python环境准备"><a href="#1-2-Python环境准备" class="headerlink" title="1.2 Python环境准备"></a>1.2 Python环境准备</h3><p>Python环境我们使用Aconda环境部署，Python内核版本为Python3.7.6。目前官网要求版本为： 3.6 或 3.7+，否则会出错。</p><p>另外需要部署安装PyFlink包。从flink1.10开始，<a href="https://pypi.org/project/apache-flink/" target="_blank" rel="noopener">PyFlink</a>安装无需编译源码.</p><p>安装命令如下（注意对应的Flink版本）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@deeplearning:~# pip install apache-flink==1.14.2</span><br></pre></td></tr></table></figure><p>由于墙的原因建议指定国内源（使用清华大学源：<a href="https://pypi.tuna.tsinghua.edu.cn/simple/），否则会很慢：" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/），否则会很慢：</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@deeplearning:~# pip install apache-flink==1.14.2 -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure><h3 id="1-3-其他环境"><a href="#1-3-其他环境" class="headerlink" title="1.3 其他环境"></a>1.3 其他环境</h3><ul><li>集群（每个节点）的JAVA_HOME要求1.8或者1.11。</li></ul><h2 id="第二部分-原理解析"><a href="#第二部分-原理解析" class="headerlink" title="第二部分 原理解析"></a>第二部分 原理解析</h2><h3 id="2-1-运行原理"><a href="#2-1-运行原理" class="headerlink" title="2.1 运行原理"></a>2.1 运行原理</h3><p>Flink项目组并没有使用Python语言重新实现Flink引擎，而是基于最小化设计原则（以最小的成本实现既定目标），在Flink Java核心外面套上一层Python API，重用现有的Java核心引擎。整个设计实现类似PySpark。</p><p>从Flink版本演进上看，主要提供能力有：</p><ul><li><p>Flink 1.8.x，开始对Python支持；</p><p>存在的问题：支持Datase/Stream 两个独立实现的API，底层使用JPython实现。</p></li><li><p>Flink 1.9.x，对Table的支持；</p></li><li><p>Flink 1.10.x，增加Python UDFs的支持，在 Table API/SQL 中注册并使用自定义函数；</p></li><li><p>Flink 1.11.x，Pandas UDF 和用户自定义的 Metrics；</p></li></ul><h4 id="2-1-1-通讯选型"><a href="#2-1-1-通讯选型" class="headerlink" title="2.1.1 通讯选型"></a>2.1.1 通讯选型</h4><p>Flink赋能Python最核心的问题是：Java（Flink为Java研发）和Python进程如何实现通讯。在Flink 1.8.x版本的时候使用Jython来实现，性能上比cpython要快。但是机器学习等生态包支持上，远不如cpython。所以从生态融合上看选择Cpython才是正确的方向。</p><p>Java和Python通信有两种解法。</p><ul><li><p>第一种，第三方实现，即实现一个统一的大数据处理管道（pipline），并支持多语言开发，通信由管道平台统一处理。这就是Google开源的Apache Beam（如下图）。</p><p>通常流程是：用户使用Apache Beam Python SDK编写数据处理管道，选择runner为FlinkRunner，最后将代码提交至Flink集群运行。</p></li></ul><p><img src="D:\myblog\source\_posts\images\picture\pyFlink\arch.jpg" alt="arch"></p><ul><li>第二种，由Flink本身在不改变源Java内核的前提下，外层套上一层薄薄的API，然后Python进程通过和这层API通信实现和Java虚拟机内部的通信。这就是大名鼎鼎的Py4J，即Py4J 作为 Java VM 和 Python 解释器之间通讯的桥梁（如下图）。</li></ul><p><img src="D:\myblog\source\_posts\images\picture\pyFlink\py4j.png" alt="py4j"></p><p>第一种解法需要依赖Apache Beam SDK能力和生态，为了通用性，必然要牺牲灵活性，参考<a href="https://beam.apache.org/documentation/io/built-in/" target="_blank" rel="noopener">Beam的外部I/O的支持清单</a>。</p><p>最终Flink选择了第二种解法。其实熟悉Spark和PySpark项目的同学应该知道Spark赋能Python也同样选择Py4J的架构（经历过线上实践考验的）。</p><p>Py4J库分为Java和Python两部分，基本原理是：</p><ol><li>Java侧，通过<code>py4j.GatewayServer</code>，启动一个GatewayServer，监听一个tcp socket（记做server_socket），用于接收Python侧的请求。</li><li>Python侧，启动一个Geteway。通过Socket访问JVM中对象或者调用方法。</li><li>Python侧在创建<code>JavaGateway</code>对象时，可以选择同时创建一个<code>CallbackServer</code>，它会在Python侧监听一个tcp socket（记做callback_socket），用来给Java回调Python代码提供一条渠道。</li><li>Python 这边创建一个 table 对象的时候，它也会在相应的 Java 这边创建一个相同 table 对象。如果创建一个 TableEnvironment 对象，在 Java 部分也会创建一个 TableEnvironment 对象。调用 table 对象上的方法，那么也会映射到 Java 这边，所以是一个一一映射的关系。</li><li>Py4J提供了一套文本协议用来在tcp socket间传递命令。</li></ol><p><img src="D:\myblog\source\_posts\images\picture\pyFlink\socket.bmp" alt="socket"></p><p>基于这样的设计，如果用户使用 Python Table API 写出了一个作业（没有 Python UDF 的时候），那么这个作业的性能和用 Java 写出来的作业性能是一样的。因为底层的架构都是同一套 Java 的架构。但是需要考虑socket通信的消耗。</p><p><img src="D:\myblog\source\_posts\images\picture\pyFlink\tableapi.bmp" alt="tableapi"></p><h4 id="2-1-2-PyFlink-UDF"><a href="#2-1-2-PyFlink-UDF" class="headerlink" title="2.1.2 PyFlink UDF"></a>2.1.2 PyFlink UDF</h4><p><a href="https://www.modb.pro/db/128622" target="_blank" rel="noopener">https://www.modb.pro/db/128622</a></p><p><a href="https://developer.aliyun.com/article/738962" target="_blank" rel="noopener">https://developer.aliyun.com/article/738962</a></p><h3 id="2-2-提交任务"><a href="#2-2-提交任务" class="headerlink" title="2.2 提交任务"></a>2.2 提交任务</h3><p>参数清单：</p><ul><li><p><code>-py,--python</code>  </p><p>Python script with the program entry. The dependent resources can be configured with the <code>--pyFiles</code> option.</p><p>说明：Python程序脚本作为入口程序。例如：<code>-py /home/flink-1.14.2/examples/python/table/word_count.py</code>，指定入口程序脚本本地路径。</p></li><li><p><code>-pym,--pyModule</code>  </p><p>Python module with the program entry point. This option must be used in conjunction with <code>--pyFiles</code>.</p><p>说明：这个参数和<code>--pyFiles</code>参数结合使用。例如这个参数案例：<code>-pym table_api_demo -pyfs file:///path/to/table_api_demo.py</code>；其中<code>pyfs</code>参数指定了入口文件的路径（也可分布式文件系统），<code>pym</code>指定了入口程序脚本名（使用<code>pyfs</code>参数中文件）。</p></li><li><p><code>-pyfs,--pyFiles</code> </p><p>Attach custom files for job. The standard resource file suffixes such as .py/.egg/.zip/.whl or directory are all supported. These files will be added to the PYTHONPATH of both the local client and the remote python UDF worker. Files suffixed with .zip will be extracted and added to PYTHONPATH. Comma (‘,’) could be used as the separator to specify multiple files (e.g., –pyFiles file:///tmp/myresource.zip,hdfs:///$namenode_address/myresource2.zip).</p><p>说明：该参数主要用于上传运行依赖的客户化脚本文件。文件类型支持：.py/.egg/.zip/.whl，甚至目录（没有验证过）。这些文件最后会追加在客户端和远端的Python检索路径中（<code>PYTHONPATH</code>）中。多个文件（目录）需要使用英文逗号间隔。对于zip类文件，解压后，路径追加Python检索路径。</p></li><li><p><code>-pyarch,--pyArchives</code>  </p><p>Add python archive files for job. The archive files will be extracted to the working directory of python UDF worker. For each archive file, a target directory be specified. If the target directory name is specified, the archive file will be extracted to a directory with the specified name. Otherwise, the archive file will be extracted to a directory with the same name of the archive file. The files uploaded via this option are accessible via relative path. ‘#’ could be used as the separator of the archive file path and the target directory name. Comma (‘,’) could be used as the separator to specify multiple archive files. This option can be used to upload the virtual environment, the data files used in Python UDF (e.g., –pyArchives file:///tmp/py37.zip,file:///tmp/data.zip#data –pyExecutable py37.zip/py37/bin/python). The data files could be accessed in Python UDF, e.g.: f = open(‘data/data.txt’, ‘r’).</p><p>说明：参数指定需要上传的压缩包文件（通常是Python SDK编译环境文件系统，也可以数据类的依赖包）。上传后压缩文件会在目的节点侧进行文件解压。解压的目标文件目录名可以通过<code>#</code>符号来指定（例如：file:///tmp/data.zip#data，解压后目录名即为data，如果压缩包中有文件data.txt，那么python程序就可用通过下面的路径进行访问：f = open(‘data/data.txt’, ‘r’)）。多个压缩文件使用英文逗号间隔。</p></li><li><p><code>-pyclientexec,--pyClientExecutable</code>  </p><p>The path of the Python interpreter used to launch the Python process when submitting the Python jobs via \”flink run\” or compiling the Java/Scala jobs containing Python UDFs. (e.g., –pyArchives file:///tmp/py37.zip –pyClientExecutable py37.zip/py37/python)</p><p>说明：参数指定了flink 客户端侧python的编译环境。例如：参数–pyArchives file:///tmp/py37.zip 指定了python的SDK包，解压后路径为：py37.zip/py37/python，所以通过这个参数可以指定客户端侧的python解析环境路径：–pyClientExecutable py37.zip/py37/python</p></li><li><p><code>-pyexec,--pyExecutable</code>  </p><p>Specify the path of the python interpreter used to execute the python UDF worker (e.g.: –pyExecutable /usr/local/bin/python3). The python UDF worker depends on Python 3.6+, Apache Beam (version == 2.27.0), Pip (version &gt;= 7.1.0) and SetupTools (version &gt;= 37.0.0). Please ensure that the specified environment meets the above requirements.</p><p>说明：类似-pyclientexec，-pyexec参数用来指定执行器的python编译环境，不再赘述。需要注意的是执行器侧python环境需要依赖包版本。</p></li><li><p><code>-pyreq,--pyRequirements</code> </p><p>Specify the requirements.txt file which defines the third-party dependencies. These dependencies will be installed and added to the PYTHONPATH of the python UDF worker. A directory which contains the installation packages of these dependencies could be specified optionally. Use ‘#’ as the separator if the optional parameter exists (e.g., –pyRequirements file:///tmp/requirements.txt#file:///tmp/cached_dir).</p><p>说明：参数用来指定第三方依赖包。</p></li></ul><h2 id="第三部分-案例运行"><a href="#第三部分-案例运行" class="headerlink" title="第三部分 案例运行"></a>第三部分 案例运行</h2><h3 id="3-1-Hello-World案例运行"><a href="#3-1-Hello-World案例运行" class="headerlink" title="3.1 Hello World案例运行"></a>3.1 Hello World案例运行</h3><p>我们首先运行一个Flink项目自带的简单案例：<a href="https://github.com/apache/flink/blob/master/flink-python/pyflink/examples/table/word_count.py" target="_blank" rel="noopener">Hello World</a>。下面是提交命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> run.sh 脚本内容(其中路径自行调整)</span></span><br><span class="line">export HADOOP_CLASSPATH=`hadoop classpath`</span><br><span class="line">/home/flink-1.14.2/bin/flink run -m yarn-cluster \</span><br><span class="line">-pyarch /home/pyflink/python3.7.6.zip \</span><br><span class="line">-pyclientexec python3.7.6.zip/anaconda3/bin/python \</span><br><span class="line">-pyexec python3.7.6.zip/anaconda3/bin/python3 \</span><br><span class="line">-py /home/flink-1.14.2/examples/python/table/word_count.py</span><br></pre></td></tr></table></figure><p>这样Yarn上就会运行一个Flink任务。</p><p>注：Pyflink其中依赖包pyarrow包需要GLIBC 2.14，所以需要注意集群节点操作系统的版本需要大于这个最低要求。</p><h3 id="3-2-在线机器学习"><a href="#3-2-在线机器学习" class="headerlink" title="3.2 在线机器学习"></a>3.2 在线机器学习</h3><h4 id="3-2-1-背景"><a href="#3-2-1-背景" class="headerlink" title="3.2.1 背景"></a>3.2.1 背景</h4><h2 id="第四部分-线上架构设计"><a href="#第四部分-线上架构设计" class="headerlink" title="第四部分 线上架构设计"></a>第四部分 线上架构设计</h2><p><a href="https://enjoyment.cool/2019/12/05/Apache-Flink-%E8%AF%B4%E9%81%93%E7%B3%BB%E5%88%97-%E5%A6%82%E4%BD%95%E5%9C%A8PyFlink-1-10%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89Python-UDF/" target="_blank" rel="noopener">https://enjoyment.cool/2019/12/05/Apache-Flink-%E8%AF%B4%E9%81%93%E7%B3%BB%E5%88%97-%E5%A6%82%E4%BD%95%E5%9C%A8PyFlink-1-10%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89Python-UDF/</a></p><p><a href="https://github.com/uncleguanghui/pyflink_learn/blob/master/examples/README.md" target="_blank" rel="noopener">https://github.com/uncleguanghui/pyflink_learn/blob/master/examples/README.md</a></p><p><a href="https://flink-learning.org.cn/article/detail/65bcdf72a377d468b5436c3e76a63437?spm=a2csy.flink.0.0.10473bdcqCaEq6" target="_blank" rel="noopener">https://flink-learning.org.cn/article/detail/65bcdf72a377d468b5436c3e76a63437?spm=a2csy.flink.0.0.10473bdcqCaEq6</a></p><p><a href="https://cloud.tencent.com/developer/article/1651257" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1651257</a></p><p><a href="https://zhuanlan.zhihu.com/p/114717285" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/114717285</a></p><h2 id="参考文献及资料"><a href="#参考文献及资料" class="headerlink" title="参考文献及资料"></a>参考文献及资料</h2><p>1、<code>PyFlink</code>项目文档，链接：<a href="https://nightlies.apache.org/flink/flink-docs-release-1.14/api/python/" target="_blank" rel="noopener">https://nightlies.apache.org/flink/flink-docs-release-1.14/api/python/</a></p><p>2、The Flink Ecosystem: A Quick Start to PyFlink，链接：<a href="https://alibaba-cloud.medium.com/the-flink-ecosystem-a-quick-start-to-pyflink-6ad09560bf50" target="_blank" rel="noopener">https://alibaba-cloud.medium.com/the-flink-ecosystem-a-quick-start-to-pyflink-6ad09560bf50</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分 环境准备&lt;/li&gt;
&lt;li&gt;第二部分 原理解析&lt;/li&gt;
&lt;li&gt;第三部分 案例运行&lt;/li&gt;
      
    
    </summary>
    
      <category term="Spring" scheme="https://zjrongxiang.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列文章（Feign服务调用）</title>
    <link href="https://zjrongxiang.github.io/2021/11/11/2021-11-15-SpringCloud%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88Feign%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%EF%BC%89/"/>
    <id>https://zjrongxiang.github.io/2021/11/11/2021-11-15-SpringCloud系列文章（Feign服务调用）/</id>
    <published>2021-11-11T05:30:00.000Z</published>
    <updated>2021-11-16T13:31:06.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>背景</li><li>第一部分 开发环境准备</li><li>第二部分 使用Maven构建项目</li><li>第三部分 项目目录结构</li><li>第四部分  编写HelloWorld项目</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Feign是Netflix公司开源的轻量级rest客户端，使用Feign可以非常方便的实现Http 客户端。Spring Cloud引入Feign并且集成了Ribbon实现客户端负载均衡调用。</p><p>Feign是一种声明式、模板化的HTTP客户端。在Spring Cloud中使用Feign, 我们可以做到使用HTTP请求远程服务时能与调用本地方法一样的编码体验,开发者完全感知不到这是远程方法,更感知不到这是个HTTP请求。 </p><h2 id="第一部分-Feign-开发环境"><a href="#第一部分-Feign-开发环境" class="headerlink" title="第一部分 Feign 开发环境"></a>第一部分 Feign 开发环境</h2><h3 id="1-1-pom-xml文件"><a href="#1-1-pom-xml文件" class="headerlink" title="1.1 pom.xml文件"></a>1.1 <code>pom.xml</code>文件</h3><p>不注明版本，会引入和<code>SpringBoot</code>相匹配的版本。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-启动类配置注解-EnableFeignClients"><a href="#1-2-启动类配置注解-EnableFeignClients" class="headerlink" title="1.2 启动类配置注解@EnableFeignClients"></a>1.2 启动类配置注解<code>@EnableFeignClients</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">// Feign注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文献及资料"><a href="#参考文献及资料" class="headerlink" title="参考文献及资料"></a>参考文献及资料</h2><p>1、Spring官网，链接：<a href="https://spring.io/projects/spring-cloud-gateway" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-gateway</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分 开发环境准备&lt;/li&gt;
&lt;li&gt;第二部分 使用Maven构建项目&lt;/li&gt;
&lt;li&gt;第三部分 
      
    
    </summary>
    
      <category term="Spring" scheme="https://zjrongxiang.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis集群部署和使用总结</title>
    <link href="https://zjrongxiang.github.io/2021/09/27/2021-10-08-Redis%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://zjrongxiang.github.io/2021/09/27/2021-10-08-Redis集群部署和使用总结/</id>
    <published>2021-09-27T11:30:00.000Z</published>
    <updated>2021-11-12T10:33:50.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>术语说明</li><li>背景</li><li>第一部分   常见深度学习计算框架在Hadoop集群运行</li><li>第一部分   Spark on Yarn</li><li>第二部分   Pyspark Application原理</li><li>第三部分   业务侧调优</li><li>第四部分   总结</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><a href="https://www.cnblogs.com/jian0110/p/14002555.html" target="_blank" rel="noopener">https://www.cnblogs.com/jian0110/p/14002555.html</a></p><p><a href="https://www.jianshu.com/p/0efaa1a271e0" target="_blank" rel="noopener">https://www.jianshu.com/p/0efaa1a271e0</a></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>1、Tensorflow on YARN Native Service - 可能目前最好的跑分布式Tensorflow训练的选择 <a href="https://www.jianshu.com/p/288b484d838b" target="_blank" rel="noopener">https://www.jianshu.com/p/288b484d838b</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;术语说明&lt;/li&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分   常见深度学习计算框架在Hadoop集群运行&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Consul" scheme="https://zjrongxiang.github.io/categories/Consul/"/>
    
    
  </entry>
  
  <entry>
    <title>Consul集群搭建</title>
    <link href="https://zjrongxiang.github.io/2021/09/27/2021-10-01-Consul%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>https://zjrongxiang.github.io/2021/09/27/2021-10-01-Consul集群搭建/</id>
    <published>2021-09-27T11:30:00.000Z</published>
    <updated>2021-10-01T07:20:46.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>术语说明</li><li>背景</li><li>第一部分   常见深度学习计算框架在Hadoop集群运行</li><li>第一部分   Spark on Yarn</li><li>第二部分   Pyspark Application原理</li><li>第三部分   业务侧调优</li><li>第四部分   总结</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>1、Tensorflow on YARN Native Service - 可能目前最好的跑分布式Tensorflow训练的选择 <a href="https://www.jianshu.com/p/288b484d838b" target="_blank" rel="noopener">https://www.jianshu.com/p/288b484d838b</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;术语说明&lt;/li&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分   常见深度学习计算框架在Hadoop集群运行&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Consul" scheme="https://zjrongxiang.github.io/categories/Consul/"/>
    
    
  </entry>
  
  <entry>
    <title>Tensorflow on Yarn技术方案总结</title>
    <link href="https://zjrongxiang.github.io/2021/09/27/2021-09-27-Tensorflow%20on%20Yarn%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/"/>
    <id>https://zjrongxiang.github.io/2021/09/27/2021-09-27-Tensorflow on Yarn技术方案总结/</id>
    <published>2021-09-27T11:30:00.000Z</published>
    <updated>2021-09-26T15:22:39.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>术语说明</li><li>背景</li><li>第一部分   常见深度学习计算框架在Hadoop集群运行</li><li>第一部分   Spark on Yarn</li><li>第二部分   Pyspark Application原理</li><li>第三部分   业务侧调优</li><li>第四部分   总结</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>企业级大数据平台通常将大量数据存储在Hadoop集群中。随着机器学习和深度学习的兴起，利用集群中的数据训练机器学习模型成了自然需求。通常有两种方式实现：</p><ul><li>建设单独的深度学习计算集群</li><li>基于现有的Hadoop集群</li></ul><h3 id="1、双集群架构"><a href="#1、双集群架构" class="headerlink" title="1、双集群架构"></a>1、双集群架构</h3><p>在现有Hadoop/Spark大数据集群基础上，新增新的机器学习集群。由Hadoop集群提供历史数据存储服务，机器学习训练集群提供模型训练计算服务。架构数据流参考下图。</p><ul><li>优点：这种架构将计算和存储功能解耦。由Hadoop集群提供数据的存储和ETL服务，而机器学习计算特点为迭代式计算，需要高性能计算节点（比如配置GPU）。各自发挥自己的计算专长。</li><li>缺点：集群之间存在大量数据的传输会增加系统之间的IO传输，另外对于模型的应用会产生模型端到端的学习应用延迟。</li></ul><p><img src="C:\Users\rongxiang\AppData\Roaming\Typora\typora-user-images\1553924486498.png" alt="1553924486498"></p><h3 id="2、混合部署"><a href="#2、混合部署" class="headerlink" title="2、混合部署"></a>2、混合部署</h3><p>考虑到双集群架构的缺点，架构上将两个功能集群混合部署，即将机器学习、深度学习任务跑在Hadoop/Spark集群上。随着Tensorflow 1.0版本开始对HDFS的支持，使得技术上有了可行性。在同一个集群上运行深度学习（机器学习）可以显著提高数据/计算资源共享的效率。而考虑到数据和计算资源贴近的原则，我们需要将常见机器学习或深度学习计算框架跑在Hadoop集群上。</p><h2 id="第一部分-开源框架介绍"><a href="#第一部分-开源框架介绍" class="headerlink" title="第一部分 开源框架介绍"></a>第一部分 开源框架介绍</h2><p>目前有不少大厂开源自己的方案，主要有：</p><table><thead><tr><th style="text-align:center">框架名称</th><th style="text-align:center">公司</th><th style="text-align:center">项目地址</th></tr></thead><tbody><tr><td style="text-align:center">TensorFlowOnSpark</td><td style="text-align:center">Yahoo！</td><td style="text-align:center"><a href="https://github.com/yahoo/TensorFlowOnSpark" target="_blank" rel="noopener">https://github.com/yahoo/TensorFlowOnSpark</a></td></tr><tr><td style="text-align:center">TensorFlowOnYARN</td><td style="text-align:center">Intel</td><td style="text-align:center"><a href="https://github.com/Intel-bigdata/TensorFlowOnYARN" target="_blank" rel="noopener">https://github.com/Intel-bigdata/TensorFlowOnYARN</a></td></tr><tr><td style="text-align:center">spark-deep-learning</td><td style="text-align:center">Databricks</td><td style="text-align:center"><a href="https://github.com/databricks/spark-deep-learning" target="_blank" rel="noopener">https://github.com/databricks/spark-deep-learning</a></td></tr><tr><td style="text-align:center">XLearning</td><td style="text-align:center">360</td><td style="text-align:center"><a href="https://github.com/Qihoo360/XLearning" target="_blank" rel="noopener">https://github.com/Qihoo360/XLearning</a></td></tr><tr><td style="text-align:center">Kubeflow</td><td style="text-align:center">Google</td><td style="text-align:center"><a href="https://github.com/kubeflow/kubeflow" target="_blank" rel="noopener">https://github.com/kubeflow/kubeflow</a></td></tr><tr><td style="text-align:center">TonY</td><td style="text-align:center">linkedin</td><td style="text-align:center"><a href="https://github.com/linkedin/TonY" target="_blank" rel="noopener">https://github.com/linkedin/TonY</a></td></tr><tr><td style="text-align:center">tf-yarn</td><td style="text-align:center">Criteo</td><td style="text-align:center"><a href="https://github.com/criteo/tf-yarn" target="_blank" rel="noopener">https://github.com/criteo/tf-yarn</a></td></tr></tbody></table><p>上面的框架对于一些关键特性的支持，进行了比较：</p><p>关键特性主要有：</p><ul><li><p>是否支持Docker</p><p>Tensorflow不同版本对cuda/cudnn支持的差异性、以及Python版本的多样性，需要对依赖进行隔离，Docker是一个较好的技术选型。</p></li><li><p>是否支持GPU的隔离</p><p>生产环境下的Tensorflow训练任务一定是多任务的，需要架构提供对GPU资源使用的隔离。</p></li><li><p>是否对Tensorflow原生代码的支持。支持用户对原生Tensorflow代码的支持。</p></li><li><p>是否支持HDFS文件系统的读写。Tensorflow1.0后支持使用libhdfs访问HDFS，主要考虑访问的便携性，特别是生产集群都是安全集群（kerberorized HDFS）</p></li></ul><ul><li>是否支持DNS。作业进程能否访问DNS类功能组件，这样用户可以通过域名方式访问Tensorboard/notebook。</li></ul><p>各计算框架支持情况如下：</p><table><thead><tr><th>框架名称</th><th>Docker</th><th>GPU</th><th>HDFS</th><th>DNS</th><th>原生代码</th></tr></thead><tbody><tr><td>TensorFlowOnSpark</td><td></td><td></td><td>是</td><td></td><td></td></tr><tr><td>TensorFlowOnYARN</td><td></td><td></td><td>是</td><td></td><td></td></tr><tr><td>spark-deep-learning</td><td></td><td></td><td>是</td><td></td><td></td></tr><tr><td>XLearning</td><td></td><td>是</td><td>是</td><td></td><td></td></tr><tr><td>Kubeflow</td><td>是</td><td>是</td><td></td><td>是</td><td></td></tr><tr><td>tf-yarn</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>上面的开源项目都是基于Yarn或者Spark组件实现的。事实上Hadoop（Yarn）在2.x版本后支持Docker on Yarn的资源调度。这就为Tensorflow运行在Yarn提供了天然的运行支持环境，我们称为：YARN Native Service。</p><ul><li><p>支持Docker</p><p>Yarn中有三个ContainerExecutor：<em>DefaultContainerExecutor</em>、<em>LinuxContainerExecutor</em>和<em>WindowsSecureContainerExecutor</em>。<em>DefaultContainerExecutor</em>适用于非安全集群、<em>LinuxContainerExecutor</em>适用于安全集群，<em>WindowsSecureContainerExecutor</em>用于在windows安全集群上。</p><p>随着Docker的普及，Yarn开始新增了一种新的ContainerExecutor，称为<em>DockerContainerExecutor</em>，允许用户将任务作为Docker容器运行。但是存在一个架构问题，在Yarn中每个NodeManager 只可以使用一个<em>ContainerExecutor</em>，即所有任务都将使用节点配置中指定的<em>ContainerExecutor</em>。一旦将群集配置为使用<em>DockerContainerExecutor</em>，用户将无法启动常规MapReduce、Spark等作业。所以这个实验性架构已经被弃用。为了解决这个架构缺陷，Yarn在<em>LinuxContainerExecutor</em>中添加了对<em>Container Runtimes</em>的支持，</p></li><li><p>支持GPU的资源调度和隔离；在Hadoop 3.0里面加入的可扩展类型的多资源调度 (multiple resource scheduling), 与Hadoop 3.1里面的GPU隔离可以很轻松的支持这一点。</p></li><li><p>不需要调整用户原生代码；下面文档里面提到的提交脚本 <em>submit_tf_job.py</em> 可以配合YARN DNS，自动生成TF_CONFIG 环境变量来支持分布式Tensorflow训练，不需要改变用户代码。</p></li><li><p>支持HDFS的读写；由于YARN原生支持HDFS delegation token来访问Kerberorized HDFS, 下面文档里面提到了怎样可以方便地在运行时把所需要的配置文件mount到Docker container里面以支持访问Kerberorized HDFS. </p></li></ul><h3 id="1-1-tf-yarn项目介绍"><a href="#1-1-tf-yarn项目介绍" class="headerlink" title="1.1 tf-yarn项目介绍"></a>1.1 tf-yarn项目介绍</h3><p>仅需几行代码即可在YARN上训练TensorFlow模型</p><p><a href="https://medium.com/criteo-labs/train-tensorflow-models-on-yarn-in-just-a-few-lines-of-code-ba0f354f38e3" target="_blank" rel="noopener">https://medium.com/criteo-labs/train-tensorflow-models-on-yarn-in-just-a-few-lines-of-code-ba0f354f38e3</a></p><h3 id="1-2-TonY项目介绍"><a href="#1-2-TonY项目介绍" class="headerlink" title="1.2 TonY项目介绍"></a>1.2 TonY项目介绍</h3><p>Open Sourcing TonY: Native Support of TensorFlow on Hadoop</p><p><a href="https://engineering.linkedin.com/blog/2018/09/open-sourcing-tony--native-support-of-tensorflow-on-hadoop" target="_blank" rel="noopener">https://engineering.linkedin.com/blog/2018/09/open-sourcing-tony--native-support-of-tensorflow-on-hadoop</a></p><p>Yahoo的开源框架TensorFlowOnSpark（TFoS）支持在Spark和Hadoop集群上执行分布式Tensorflow。</p><p>报错讨论：<a href="https://github.com/yahoo/TensorFlowOnSpark/issues/33" target="_blank" rel="noopener">https://github.com/yahoo/TensorFlowOnSpark/issues/33</a></p><p><a href="https://www.cnblogs.com/heimianshusheng/p/6768019.html" target="_blank" rel="noopener">基于Hadoop分布式集群YARN模式下的TensorFlowOnSpark平台搭建</a></p><p><a href="https://www.cnblogs.com/libinggen/p/7824753.html" target="_blank" rel="noopener">学习笔记TF065:TensorFlowOnSpark</a></p><p>yahoo <a href="https://www.tumblr.com/register/follow/yahoohadoop" target="_blank" rel="noopener">https://www.tumblr.com/register/follow/yahoohadoop</a></p><p>文章：</p><p><a href="https://runitao.github.io/distributed-tensorflow.html" target="_blank" rel="noopener">https://runitao.github.io/distributed-tensorflow.html</a></p><p><a href="https://blog.csdn.net/ChaosJ/article/details/104786247" target="_blank" rel="noopener">https://blog.csdn.net/ChaosJ/article/details/104786247</a></p><p><a href="https://blog.csdn.net/karamos/article/details/80130751" target="_blank" rel="noopener">https://blog.csdn.net/karamos/article/details/80130751</a></p><p><a href="https://www.infoq.cn/article/k4ulimanccimgfuqk_cd" target="_blank" rel="noopener">https://www.infoq.cn/article/k4ulimanccimgfuqk_cd</a></p><h2 id="参考文献及资料"><a href="#参考文献及资料" class="headerlink" title="参考文献及资料"></a>参考文献及资料</h2><p>1、Tensorflow on YARN Native Service - 可能目前最好的跑分布式Tensorflow训练的选择 <a href="https://www.jianshu.com/p/288b484d838b" target="_blank" rel="noopener">https://www.jianshu.com/p/288b484d838b</a></p><p>2、<a href="http://yahoohadoop.tumblr.com/post/157196317141/open-sourcing-tensorflowonspark-distributed-deep" target="_blank" rel="noopener">Open Sourcing TensorFlowOnSpark: Distributed Deep Learning on Big-Data Clusters</a> </p><p>3、<a href="https://github.com/yahoo/TensorFlowOnSpark/wiki/GetStarted_YARN" target="_blank" rel="noopener">https://github.com/yahoo/TensorFlowOnSpark/wiki/GetStarted_YARN</a></p><p>4、TensorFlowOnSpark 源码解析 链接：<a href="https://www.jianshu.com/p/72d153c284cd" target="_blank" rel="noopener">https://www.jianshu.com/p/72d153c284cd</a></p><p>5、Tensorflow on Spark爬坑指南 链接：<a href="https://www.jianshu.com/p/72cb5816a0f7" target="_blank" rel="noopener">https://www.jianshu.com/p/72cb5816a0f7</a></p><p>6、使用TensorFlowOnSpark进行深度学习 链接：<a href="https://kitwaicloud.github.io/tensorflow_on_spark/tensorflow_on_spark.html" target="_blank" rel="noopener">https://kitwaicloud.github.io/tensorflow_on_spark/tensorflow_on_spark.html</a></p><p>7、学习笔记TF065: TensorFlowOnSpark 链接：<a href="https://cloud.tencent.com/developer/article/1006361" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1006361</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;术语说明&lt;/li&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分   常见深度学习计算框架在Hadoop集群运行&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Tensorflow，Yarn，python" scheme="https://zjrongxiang.github.io/categories/Tensorflow%EF%BC%8CYarn%EF%BC%8Cpython/"/>
    
    
  </entry>
  
  <entry>
    <title>信息论和位进制</title>
    <link href="https://zjrongxiang.github.io/2021/09/27/2021-10-01-%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%92%8C%E4%BD%8D%E8%BF%9B%E5%88%B6/"/>
    <id>https://zjrongxiang.github.io/2021/09/27/2021-10-01-信息论和位进制/</id>
    <published>2021-09-27T11:30:00.000Z</published>
    <updated>2021-10-01T14:03:37.450Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>术语说明</li><li>背景</li><li>第一部分   常见深度学习计算框架在Hadoop集群运行</li><li>第一部分   Spark on Yarn</li><li>第二部分   Pyspark Application原理</li><li>第三部分   业务侧调优</li><li>第四部分   总结</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>人类为什么选择10进制位进制作为日常计数，而计算机科学中为什么选择2进制作为位进制。</p><h2 id="第一部分-信息论基础"><a href="#第一部分-信息论基础" class="headerlink" title="第一部分 信息论基础"></a>第一部分 信息论基础</h2><h2 id="第二部分-位进制基础"><a href="#第二部分-位进制基础" class="headerlink" title="第二部分 位进制基础"></a>第二部分 位进制基础</h2><p>数学这门学科起源于计数，</p><h2 id="第三部分-两者的关系"><a href="#第三部分-两者的关系" class="headerlink" title="第三部分 两者的关系"></a>第三部分 两者的关系</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>1、Tensorflow on YARN Native Service - 可能目前最好的跑分布式Tensorflow训练的选择 <a href="https://www.jianshu.com/p/288b484d838b" target="_blank" rel="noopener">https://www.jianshu.com/p/288b484d838b</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;术语说明&lt;/li&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分   常见深度学习计算框架在Hadoop集群运行&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Consul" scheme="https://zjrongxiang.github.io/categories/Consul/"/>
    
    
  </entry>
  
  <entry>
    <title>kubernetes常用命令汇总</title>
    <link href="https://zjrongxiang.github.io/2021/08/02/2021-08-14-kubernetes%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
    <id>https://zjrongxiang.github.io/2021/08/02/2021-08-14-kubernetes常用命令汇总/</id>
    <published>2021-08-02T13:30:00.000Z</published>
    <updated>2021-08-14T14:30:28.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>背景</li><li>第一部分  环境依赖</li><li>第二部分 交互接口</li><li>第三部分 任务提交</li><li>参考文献及资料</li></ul><h2 id="第一部分-kubectl-get-获取资源列表"><a href="#第一部分-kubectl-get-获取资源列表" class="headerlink" title="第一部分 kubectl get - 获取资源列表"></a>第一部分 kubectl get - 获取资源列表</h2><h3 id="1-1-获取集群所有pods信息"><a href="#1-1-获取集群所有pods信息" class="headerlink" title="1.1 获取集群所有pods信息"></a>1.1 获取集群所有pods信息</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> pods</span><br></pre></td></tr></table></figure><h3 id="1-2-查看当前所有service"><a href="#1-2-查看当前所有service" class="headerlink" title="1.2 查看当前所有service"></a>1.2 查看当前所有service</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> services</span><br></pre></td></tr></table></figure><h2 id="第二部分-kubectl-describe-查看资源详细信息"><a href="#第二部分-kubectl-describe-查看资源详细信息" class="headerlink" title="第二部分 kubectl describe - 查看资源详细信息"></a>第二部分 kubectl describe - 查看资源详细信息</h2><h2 id="第三部分-kubectl-logs-查看pod日志"><a href="#第三部分-kubectl-logs-查看pod日志" class="headerlink" title="第三部分 kubectl logs - 查看pod日志"></a>第三部分 kubectl logs - 查看pod日志</h2><h2 id="第四部分-kubectl-delete-删除一个资源"><a href="#第四部分-kubectl-delete-删除一个资源" class="headerlink" title="第四部分 kubectl delete - 删除一个资源"></a>第四部分 kubectl delete - 删除一个资源</h2><h2 id="第五部分-kubectl-proxy-启动代理"><a href="#第五部分-kubectl-proxy-启动代理" class="headerlink" title="第五部分 kubectl proxy - 启动代理"></a>第五部分 kubectl proxy - 启动代理</h2><h2 id="参考文献及资料"><a href="#参考文献及资料" class="headerlink" title="参考文献及资料"></a>参考文献及资料</h2><p>1、  官网地址，链接:<a href="https://tomcat.apache.org/" target="_blank" rel="noopener">https://tomcat.apache.org/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;
      
    
    </summary>
    
      <category term="kubernetes" scheme="https://zjrongxiang.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="https://zjrongxiang.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列文章（nacos服务注册总结）</title>
    <link href="https://zjrongxiang.github.io/2021/07/31/2021-08-10-SpringCloud%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88nacos%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E6%80%BB%E7%BB%93%EF%BC%89/"/>
    <id>https://zjrongxiang.github.io/2021/07/31/2021-08-10-SpringCloud系列文章（nacos服务注册总结）/</id>
    <published>2021-07-31T05:30:00.000Z</published>
    <updated>2021-10-09T14:18:30.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>背景</li><li>第一部分 开发、测试环境项目部署</li><li>第二部分 项目打包</li><li>第三部分 生产环境部署</li><li>第四部分  总结</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>而 Nacos 作为微服务核心的服务注册与发现中心，让大家在 Eureka 和 Consule 之外有了新的选择，开箱即用，上手简洁，暂时也没发现有太大的坑。</p><h2 id="第一部分-Nacos的部署"><a href="#第一部分-Nacos的部署" class="headerlink" title="第一部分 Nacos的部署"></a>第一部分 <code>Nacos</code>的部署</h2><p>Nacos支持三种部署模式</p><p>1、单机模式：可用于测试和单机使用，生产环境切忌使用单机模式（满足不了高可用）</p><p>2、集群模式：可用于生产环境，确保高可用</p><p>3、多集群模式：可用于多数据中心场景</p><h2 id="第二部分-多环境实践"><a href="#第二部分-多环境实践" class="headerlink" title="第二部分 多环境实践"></a>第二部分 多环境实践</h2><p>开发环境、测试环境、预发环境、正式环境</p><h3 id="DataId方案"><a href="#DataId方案" class="headerlink" title="DataId方案"></a><strong>DataId方案</strong></h3><p>设置启动参数spring.profiles.active，设置不同的环境dev、test；</p><h2 id="Namespace方案"><a href="#Namespace方案" class="headerlink" title="Namespace方案"></a><strong>Namespace方案</strong></h2><h2 id="参考文献及资料"><a href="#参考文献及资料" class="headerlink" title="参考文献及资料"></a>参考文献及资料</h2><p>1、<code>vue</code>项目文档，链接：<a href="https://www.cnblogs.com/crazymakercircle/p/14231815.html" target="_blank" rel="noopener">https://www.cnblogs.com/crazymakercircle/p/14231815.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分 开发、测试环境项目部署&lt;/li&gt;
&lt;li&gt;第二部分 项目打包&lt;/li&gt;
&lt;li&gt;第三部分 生产
      
    
    </summary>
    
      <category term="Vue" scheme="https://zjrongxiang.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue学习笔记</title>
    <link href="https://zjrongxiang.github.io/2021/07/31/2021-07-31-Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://zjrongxiang.github.io/2021/07/31/2021-07-31-Vue学习笔记/</id>
    <published>2021-07-31T05:30:00.000Z</published>
    <updated>2021-07-31T15:28:53.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>背景</li><li>第一部分 开发、测试环境项目部署</li><li>第二部分 项目打包</li><li>第三部分 生产环境部署</li><li>第四部分  总结</li><li>参考文献及资料</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="第一部分-第一个案例"><a href="#第一部分-第一个案例" class="headerlink" title="第一部分 第一个案例"></a>第一部分 第一个案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.14"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="actionscript">      message: <span class="string">"Hello"</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第二部分-组件"><a href="#第二部分-组件" class="headerlink" title="第二部分 组件"></a>第二部分 组件</h2><h3 id="2-1-v-bind"><a href="#2-1-v-bind" class="headerlink" title="2.1 v-bind"></a>2.1 v-bind</h3><p>绑定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">"messageTest"</span>&gt;</span></span><br><span class="line">  鼠标悬停</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.14"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//messageTest: "页面加载与"+ new Date().toLocaleString()</span></span></span><br><span class="line"><span class="actionscript">      messageTest: <span class="string">"test"</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-判断循环（v-if、v-else、v-else-if）"><a href="#2-2-判断循环（v-if、v-else、v-else-if）" class="headerlink" title="2.2 判断循环（v-if、v-else、v-else-if）"></a>2.2 判断循环（v-if、v-else、v-else-if）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.14"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="actionscript">      ok: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表达式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"type==='A'"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">"type==='B'"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>C<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.14"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="actionscript">      type: <span class="string">"A"</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-Vue-component"><a href="#2-3-Vue-component" class="headerlink" title="2.3 Vue.component"></a>2.3 Vue.component</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;rongxiang v-for=&quot;item in items&quot; v-bind:mid=&quot;item&quot;&gt;&lt;/rongxiang&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  Vue.component(&quot;rongxiang&quot;,&#123;</span><br><span class="line">    props: [&quot;mid&quot;],</span><br><span class="line">    template: &apos;&lt;li&gt;&#123;&#123;mid&#125;&#125;&lt;/li&gt;&apos;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  var vm = new Vue(&#123;</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    data: &#123;items: [&quot;java&quot;,&quot;python&quot;,&quot;lua&quot;,&quot;scala&quot;]&#125;,</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="第三部分-通信Axios"><a href="#第三部分-通信Axios" class="headerlink" title="第三部分 通信Axios"></a>第三部分 通信Axios</h2><h2 id="参考文献及资料"><a href="#参考文献及资料" class="headerlink" title="参考文献及资料"></a>参考文献及资料</h2><p>1、<code>vue</code>项目文档，链接：<a href="https://vuejs.org/" target="_blank" rel="noopener">https://vuejs.org/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;第一部分 开发、测试环境项目部署&lt;/li&gt;
&lt;li&gt;第二部分 项目打包&lt;/li&gt;
&lt;li&gt;第三部分 生产
      
    
    </summary>
    
      <category term="Vue" scheme="https://zjrongxiang.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux系统中的su命令</title>
    <link href="https://zjrongxiang.github.io/2021/06/14/2021-06-14-Linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84su%E5%91%BD%E4%BB%A4/"/>
    <id>https://zjrongxiang.github.io/2021/06/14/2021-06-14-Linux系统中的su命令/</id>
    <published>2021-06-14T04:42:00.000Z</published>
    <updated>2021-06-14T06:52:40.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p>背景</p></li><li><p>第一部分 <code>su</code>命令</p></li><li><p>第二部分 <code>su</code> 和 <code>su -</code>区别</p></li><li><p>参考文献及资料</p></li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><code>Linux</code>操作系统是多用户多任务操作系统。多用户多任务就是可以在操作系统上建立多个用户，多个用户可以在同一时间内登录并执行各自不同的任务，互不影响。不同用户具有不同的权限，每个用户是在权限允许的范围内完成不同的任务，<code>Linux</code>正是通过这种权限的划分与管理，实现了多用户多任务的运行机制。</p><p>在日常运维中，<code>su</code>命令是最简单的用户切换命令，通过该命令可以实现任何用户身份的切换（包括从普通用户切换为 root 用户、从 root 用户切换为普通用户以及普通用户之间的切换）。普通用户之间切换以及普通用户切换至 root 用户，需要目标用户密钥，只有正确输入密钥，才能实现切换；从 root 用户切换至其他用户，无需知晓对方密钥，直接可切换成功。</p><h2 id="第一部分-su命令"><a href="#第一部分-su命令" class="headerlink" title="第一部分 su命令"></a>第一部分 <code>su</code>命令</h2><p><code>su</code> 命令的基本格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@VM-0-5-ubuntu:~# su [选项] 用户名</span><br></pre></td></tr></table></figure><p>参数选项：</p><ul><li><code>-</code>：当前用户不仅切换为指定用户的身份，同时所用的工作环境也切换为此用户的环境（包括 PATH 变量、MAIL 变量等）。使用 - 选项可省略用户名，默认会切换为 root 用户。</li><li><code>-l</code>：同<code>-</code>的使用类似，也就是在切换用户身份的同时，完整切换工作环境，但后面需要添加欲切换的使用者账号。</li><li><code>-p</code>：表示切换为指定用户的身份，但不改变当前的工作环境（不使用切换用户的配置文件）。</li><li><code>-m</code>：和 <code>-p</code> 一样；</li><li><code>-c</code> 命令：仅切换用户执行一次命令，执行后自动切换回来，该选项后通常会带有要执行的命令。</li></ul><h2 id="第二部分-su-和-su-区别"><a href="#第二部分-su-和-su-区别" class="headerlink" title="第二部分 su 和 su -区别"></a>第二部分 <code>su</code> 和 <code>su -</code>区别</h2><p>在实际运维使用中，经常踩的坑就是 <code>su</code> 和 <code>su -</code>的区别了。运维人员通常认为两者是相同，或者不知道 <code>su -</code>。</p><p>事实上，有<code>-</code>和没有 <code>-</code>是完全不同的，<code>-</code>选项表示在切换用户身份的同时，连当前使用的环境变量也切换成指定用户的。环境变量是用来定义操作系统环境的，因此如果系统环境没有随用户身份切换，很多命令无法正确执行。</p><p>初学者可以这样理解它们之间的区别，即有 - 选项，切换用户身份更彻底；反之，只切换了一部分。在不使用 <code>su -</code>的情况下，虽然用户身份成功切换，但环境变量依旧用的是原用户的，切换并不完整。</p><h2 id="参考文献及资料"><a href="#参考文献及资料" class="headerlink" title="参考文献及资料"></a>参考文献及资料</h2><p>1、Su Command in Linux (Switch User)，链接：<a href="https://linuxize.com/post/su-command-in-linux/" target="_blank" rel="noopener">https://linuxize.com/post/su-command-in-linux/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;背景&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第一部分 &lt;code&gt;su&lt;/code&gt;命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第
      
    
    </summary>
    
      <category term="Linux" scheme="https://zjrongxiang.github.io/categories/Linux/"/>
    
    
  </entry>
  
</feed>
